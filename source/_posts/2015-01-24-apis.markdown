---
layout: post
title: "Some thoughts APIs, SDKs and native apps"
date: 2015-01-24 10:29:19 +0100
comments: true
categories: 
---
Twitter is awesome for a lot of things. A discussion is certainly not one of them. Knowing that, I still often fall into the trap of wanting to explain my opinion on certain topics on Twitter itself. It never feels satisfactorily.  The latest edition of this started with this tweet of mine:

{% blockquote @bjoernrochel https://twitter.com/BjoernRochel/status/557569775090417666 %}
Is it just me, or are SDKs over HTTP APIs an indicator for an RPC-like API design?
Is there something like a sdk-rest-smell?
{% endblockquote %}

This tweet (and probably some follow-up tweets) promted some of my friends to chime in with lots of questions and different perspectives. So, [@ilkerde](https://twitter.com/ilkerde), [@mikebild](https://twitter.com/mikebild) and [@lanwin](https://twitter.com/lanwin), here's the longer version, with a more context, more time to think about what I really wanted to say, minus the ranty nature.

#On 'the right way' to build REST APIs
Ask 10 people to describe what they think REST is and you likely get 10 different answers. For some it's HTTP APIs. Other extend this to CRUD over HTTP and fancy urls. Some talk of Hypermedia and always end up quoting [Inigo Montoya](http://knowyourmeme.com/memes/you-keep-using-that-word-i-do-not-think-it-means-what-you-think-it-means).  What's THE right way to build HTTP APIs? Who of them is right and who is wrong?

From my point of view these are the wrong questions to ask and when they're asked without context, I consider them especially useless. The more interesting questions in my opinion are of the following kind:

* who will consume it?
* how many consumers are there?
* how often do you expect change in the API?
* how cheap is change in the API?

Answering these questions alone for me is very insightful and can change the kind of API I would build. The degree of coupling I'm willing to tolerate in an API design depends heavily on the answers to those questions.

Coupling is a strange thing to describe, but for me it roughly correlates to the **pain and effort that is caused when you try to change something**. The higher the pain is when you attempt to change something, in my experience the likelier it is that you're dealing with a design that couples client and consumer tightly together.

## Who will consume my API and how many consumers are there?

## How often do you expect change in the API?
## How cheap is change in the API?
# SDKs for native apps
## Caching & coupling

