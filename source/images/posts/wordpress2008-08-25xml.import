<?xml version="1.0" encoding="UTF-8"?>

<!--
	This is a WordPress eXtended RSS file generated by WordPress as an export of 
	your blog. It contains information about your blog's posts, comments, and 
	categories. You may use this file to transfer that content from one site to 
	another. This file is not intended to serve as a complete backup of your 
	blog.
	
	To import this information into a WordPress blog follow these steps:
	
	1.	Log into that blog as an administrator.
	2.	Go to Manage > Import in the blog's admin.
	3.	Choose "WordPress" from the list of importers.
	4.	Upload this file using the form provided on that page.
	5.	You will first be asked to map the authors in this export file to users 
		on the blog. For each author, you may choose to map an existing user on 
		the blog or to create a new user.
	6.	WordPress will then import each of the posts, comments, and categories 
		contained in this file onto your blog.
-->

<!-- generator="wordpress/2.2.1" created="2008-08-25 16:49"-->
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Björn Rochel's weblog</title>
	<link>http://bjro.de</link>
	<description>class BjRo : Coder, ILove, ILove</description>
	<pubDate>Fri, 22 Aug 2008 15:30:42 +0000</pubDate>
	<generator>http://wordpress.org/?v=2.2.1</generator>
	<language>en</language>
	<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:posts_private>0</wp:posts_private><wp:links_private>0</wp:links_private><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>blogroll</wp:category_nicename><wp:category_parent></wp:category_parent><wp:posts_private>0</wp:posts_private><wp:links_private>0</wp:links_private><wp:cat_name><![CDATA[Blogroll]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>blogs-i-read</wp:category_nicename><wp:category_parent></wp:category_parent><wp:posts_private>0</wp:posts_private><wp:links_private>0</wp:links_private><wp:cat_name><![CDATA[Blogs I read]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>stuff-i-care-about</wp:category_nicename><wp:category_parent></wp:category_parent><wp:posts_private>0</wp:posts_private><wp:links_private>0</wp:links_private><wp:cat_name><![CDATA[Stuff I care about]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>domain-specific-languages</wp:category_nicename><wp:category_parent></wp:category_parent><wp:posts_private>0</wp:posts_private><wp:links_private>0</wp:links_private><wp:cat_name><![CDATA[Domain Specific Languages]]></wp:cat_name></wp:category>
	<wp:category><wp:category_nicename>testing</wp:category_nicename><wp:category_parent></wp:category_parent><wp:posts_private>0</wp:posts_private><wp:links_private>0</wp:links_private><wp:cat_name><![CDATA[Testing]]></wp:cat_name></wp:category>
		<item>
<title>A slight variation of the Passive View pattern</title>
<link>http://bjro.de/?p=19</link>
<pubDate>Thu, 01 Jan 1970 01:00:00 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/?p=19</guid>
<description></description>
<content:encoded><![CDATA[I've been using Model-View-Presenter as my default design architecture for testable screens for quite a while now (&gt; 2.5 years, WinForms only).

http://msdn.microsoft.com/en-us/magazine/cc188690.aspx
http://de.wikipedia.org/wiki/Model_View_Presenter
http://martinfowler.com/eaaDev/PassiveScreen.html
http://martinfowler.com/eaaDev/SupervisingPresenter.html]]></content:encoded>
<wp:post_id>19</wp:post_id>
<wp:post_date>0000-00-00 00:00:00</wp:post_date>
<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name></wp:post_name>
<wp:status>draft</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
	</item>
<item>
<title>Alt.NET Logo</title>
<link>http://bjro.de/?attachment_id=3</link>
<pubDate>Tue, 24 Jun 2008 18:17:14 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/06/altnetgeekcodesmall.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>3</wp:post_id>
<wp:post_date>2008-06-24 20:17:14</wp:post_date>
<wp:post_date_gmt>2008-06-24 18:17:14</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>altnet-logo</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>-1214330755</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/06/altnetgeekcodesmall.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:156;s:6:"height";i:60;s:14:"hwstring_small";s:23:"height='49' width='128'";s:4:"file";s:102:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/06/altnetgeekcodesmall.png";s:5:"thumb";s:33:"altnetgeekcodesmall.thumbnail.png";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Revamping www.bjro.de</title>
<link>http://bjro.de/2008/06/24/revamping-wwwbjrode/</link>
<pubDate>Tue, 24 Jun 2008 20:04:07 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/06/24/revamping-wwwbjrode/</guid>
<description></description>
<content:encoded><![CDATA[My original website launched summer 2002 and accompanied myself until I finished my studies back in 2005. My first real job as a <strong> software developer</strong> consumed most of the time I was previously spending on my website. In fact, it has been left untouched since I left the university. The idea of revamping my website has been on my mind for quite a while now, but I didn't have time and patience until now to actually do it.

I would like to use this website in order to write about things I really care about in software development and things I'm trying to convey to my colleagues every day. Besides that I would like to share and to discuss my experience with certain patterns, methodologies, architectures, etc. with interested folks out there. This includes (but is not limited to):
<ul>
	<li>Creating composite GUI-applications with a high amount of testable code,</li>
	<li>Experiences in applying variations of the Model View Presenter pattern,</li>
	<li>Dependency breaking techniques in legacy code in order to get it under test,</li>
	<li>Distributed domain driven design,</li>
	<li>and general stuff around TDD, agile methodologies and object-oriented design.</li>
</ul>
Cheers,

Björn Rochel

P.S.:

While you are reading this you maybe ask yourself: "Why does this german guy write his blog in English?". On the one hand it's a thing I need to practice, because my English has become quite a bit rusty since I left school. Besides that it enables me to talk to a much greater audience.]]></content:encoded>
<wp:post_id>4</wp:post_id>
<wp:post_date>2008-06-24 22:04:07</wp:post_date>
<wp:post_date_gmt>2008-06-24 20:04:07</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>revamping-wwwbjrode</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
	</item>
<item>
<title>About visual designers . . .</title>
<link>http://bjro.de/2008/06/25/about-visual-designers/</link>
<pubDate>Wed, 25 Jun 2008 10:51:33 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/06/25/about-visual-designers/</guid>
<description></description>
<content:encoded><![CDATA[Today I came across a very interesting post from jeremy miller regarding <a href="http://codebetter.com/blogs/jeremy.miller/archive/2008/06/24/does-our-addiction-on-visual-tooling-harm-the-rate-of-innovation-in-the-net-world.aspx">his view on visual designers</a>.  Everyone who works or worked with me so far knows I don't like visual  designers at all, which is quite funny since I was involved in building a designer app for winforms and web-based forms for my company for the bigger part of the last two years.  To link my experience to the article:  Imho it's very expensive and difficult to create a designer app with a very good user experience.

Enjoy it!]]></content:encoded>
<wp:post_id>5</wp:post_id>
<wp:post_date>2008-06-25 12:51:33</wp:post_date>
<wp:post_date_gmt>2008-06-25 10:51:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>about-visual-designers</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
	</item>
<item>
<title>Yet another way to do publish &#38; subscribe . . .</title>
<link>http://bjro.de/2008/06/30/yet-another-way-to-do-publish-subscribe/</link>
<pubDate>Mon, 30 Jun 2008 20:01:15 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/06/30/yet-another-way-to-do-publish-subscribe/</guid>
<description></description>
<content:encoded><![CDATA[About 2,5 years ago I first came across the idea of combining dependency injection with loosly coupled publish &amp; subscribe. This was when I inspected the source code of the <a href="http://msdn.microsoft.com/en-us/library/aa480450.aspx">Composite Application Block (CAB)</a> with its underlying InversionOfControl-container ObjectBuilder from Microsoft.

What I liked about publish &amp; subscribe in CAB:
<ul>
	<li>The automatic thread marshalling. (Basically you're able to specify whether the subscription-callback will be handled on the UI-thread or the same thread as the publisher)</li>
	<li>The wiring was done during the build process in the ObjectBuilder. Publishers and Subscribers are completely decoupled. Wow, this was pretty amazing for me when I discovered that late 2005 :-).</li>
</ul>
What I didn't like about it:
<ul>
	<li>It is very tightly coupled to a CAB internal data structure called WorkItem. (Not reusable outside the scope of CAB)</li>
	<li>It uses standard .NET events / delegates. (The publisher needed to define an event and the subscriber needed to have a public method with a matching  "object-sender-eventargs-e" - signature.)</li>
	<li>It uses attributes and especially a string based topic identifier to correlate publishers for a topic and corresponding subscribers. (Maybe I'm narrow-minded on this, but I think the simplest way to specify a subscription is the best, which imho is expressing a subscription by implementing an interface.)</li>
</ul>
Many frameworks or libraries I looked into over time mostly followed a comparable approach using either events or some other delegate-based solution (the EventBroker in CAB, the EventBrokerFacility in Castle Windsor, the EventAggregator in PRISM, ....) (Please correct me if I overlooked or misunderstood something :-)). The only framework I came across with something similar to what I had in mind is <a href="http://devlicio.us/blogs/rob_eisenberg/archive/2008/01/07/introducing-caliburn-an-mvc-mvp-wpf-framework.aspx">Caliburn</a>.

Unfortunately Caliburn is a WPF/ .NET 3.0 based framework, but most of the products of my current employer are limited to .NET 2.0 due to a minimum  system requirement of Windows 2k. Because of that I decided to implement something similar for our purposes which can be easily integrated into the InversionOfControl - container of our choice (which is Castle Windsor at the moment, by the way :-) ).

I'll be describing the implementation and publish the source code for anyone who is interested in one or more follow-up posts . . . .]]></content:encoded>
<wp:post_id>6</wp:post_id>
<wp:post_date>2008-06-30 22:01:15</wp:post_date>
<wp:post_date_gmt>2008-06-30 20:01:15</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>yet-another-way-to-do-publish-subscribe</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:comment>
<wp:comment_id>15</wp:comment_id>
<wp:comment_author>Rainer Schuster</wp:comment_author>
<wp:comment_author_email>schuster-rainer@web.de</wp:comment_author_email>
<wp:comment_author_url>http://dotnet-forum.de/blogs/rainerschuster</wp:comment_author_url>
<wp:comment_author_IP>77.190.24.134</wp:comment_author_IP>
<wp:comment_date>2008-08-15 15:58:50</wp:comment_date>
<wp:comment_date_gmt>2008-08-15 13:58:50</wp:comment_date_gmt>
<wp:comment_content>Did you have a look at the Publish/Subscriber Pattern Sample at the Unity Source</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>16</wp:comment_id>
<wp:comment_author>BjRo</wp:comment_author>
<wp:comment_author_email>bjoern@bjro.de</wp:comment_author_email>
<wp:comment_author_url>http://www.bjro.de</wp:comment_author_url>
<wp:comment_author_IP>213.196.231.154</wp:comment_author_IP>
<wp:comment_date>2008-08-15 21:00:07</wp:comment_date>
<wp:comment_date_gmt>2008-08-15 19:00:07</wp:comment_date_gmt>
<wp:comment_content>Yes I did (in case you mean the SimpleEventBroker sample). It's conceptually very close to the original CAB-implementation (Based on .NET-events which are marked with attributes containing string-based topic identifiers.) So most of the things I didn't like about Publish & Subscribe in CAB apply to this sample, too. 

Or is there something newer?</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
	</item>
<item>
<title>Yet another way to do publish &#38; subscribe Part II . . .</title>
<link>http://bjro.de/2008/07/02/yet-another-way-to-do-publish-subscribe-part-ii/</link>
<pubDate>Wed, 02 Jul 2008 16:21:03 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/07/02/yet-another-way-to-do-publish-subscribe-part-ii/</guid>
<description></description>
<content:encoded><![CDATA[As promised on the last post, this time I talk more about what I actually implemented. Let's start with the basic API. The whole API is very simple and message centered. In order to be able to recieve messages you have to implement the <strong>ISubscriber&lt;TMessage&gt;</strong> interface.
<p style="margin: 0px">     <span style="color: blue">public</span> <span style="color: blue">interface</span> <span style="color: #2b91af">ISubscriber</span>&lt;TMessage&gt;</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: blue">void</span> Handle(TMessage message);</p>
<p style="margin: 0px">    }</p>
The generic parameter <strong>TMessage </strong>specifies the type of message the subscriber is interested in.  The message should simply be implemented by a POCO. Examples could be:
<ul>
	<li>ISubscriber&lt;ActivePatientChanged&gt;</li>
	<li>ISubscriber&lt;ApplicationTitleChanged&gt;</li>
	<li>ISubscriber&lt;CsvExportFinished&gt;</li>
</ul>
A consumer class wants to publish messages or to register itsself for a particular message needs to have a reference to an <strong>IMessageBus </strong>implementation. This interface serves as a consumer side facade to the pubsub system.
<p style="background: white none repeat scroll 0% 0%; font-family: Consolas; font-size: 8pt; color: black; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">interface</span> <span style="color: #2b91af">IMessageBus</span></p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: blue">void</span> AddSubscriber&lt;TMessage&gt;(</p>
<p style="margin: 0px">            <span style="color: #2b91af">ISubscriber</span>&lt;TMessage&gt; subscriber);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">void</span> ReleaseSubscriber&lt;TMessage&gt;(</p>
<p style="margin: 0px">            <span style="color: #2b91af">ISubscriber</span>&lt;TMessage&gt; subscriber);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">void</span> SendMessage&lt;TMessage&gt;(</p>
<p style="margin: 0px">            TMessage message);</p>
<p style="margin: 0px">    }</p>
From a consumer perspective that's all your need to known when dealing with publish &amp; subscribe. Together with type inference it's event nicer to use :-).
<p style="background: white none repeat scroll 0% 0%; font-family: Consolas; font-size: 8pt; color: black; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">DemoMessage</span></p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">MyListener</span> : <span style="color: #2b91af">ISubscriber</span>&lt;<span style="color: #2b91af">DemoMessage</span>&gt;</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: blue">public</span> <span style="color: blue">void</span> Subscribe(<span style="color: #2b91af">IMessageBus</span> bus)</p>
<p style="margin: 0px">        {</p>
<p style="margin: 0px">            bus.AddSubscriber(<span style="color: blue">this</span>);</p>
<p style="margin: 0px">        }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">public</span> <span style="color: blue">void</span> Handle(<span style="color: #2b91af">DemoMessage</span> message)</p>
<p style="margin: 0px">        {</p>
<p style="margin: 0px">        }</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">MyPublisher</span></p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: blue">private</span> <span style="color: #2b91af">IMessageBus</span> _Bus;</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">public</span> MyPublisher(<span style="color: #2b91af">IMessageBus</span> bus)</p>
<p style="margin: 0px">        {</p>
<p style="margin: 0px">            _Bus = bus;</p>
<p style="margin: 0px">        }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">public</span> <span style="color: blue">void</span> Demo()</p>
<p style="margin: 0px">        {</p>
<p style="margin: 0px">            _Bus.SendMessage(<span style="color: blue">new</span> <span style="color: #2b91af">DemoMessage</span>());</p>
<p style="margin: 0px">        }</p>
<p style="margin: 0px">    }</p>
Some other characteristics also worth mentioning:
<ul>
	<li>The current implementation captures the thread context when a subscriber is registered. All callbacks will be handled on the same thread on which they were registered.</li>
	<li>Only a weak reference is held to the subscriber. This guarantees that a subscriber can be garbage collected although not properly unregistered from the publish &amp; subscribe system. The implementation detects dead references and removes them automatically.</li>
</ul>
With that beeing said I would like too conclude the series about publish &amp; subscribe with a post about the actual implementation which will follow up . . .]]></content:encoded>
<wp:post_id>7</wp:post_id>
<wp:post_date>2008-07-02 18:21:03</wp:post_date>
<wp:post_date_gmt>2008-07-02 16:21:03</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>yet-another-way-to-do-publish-subscribe-part-ii</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
	</item>
<item>
<title>PubSub.IocBridge</title>
<link>http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/pubsubiocbridge/</link>
<pubDate>Mon, 07 Jul 2008 11:38:41 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/07/iocbridge.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>8</wp:post_id>
<wp:post_date>2008-07-07 13:38:41</wp:post_date>
<wp:post_date_gmt>2008-07-07 11:38:41</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>pubsubiocbridge</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>12</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/iocbridge.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:242;s:6:"height";i:145;s:14:"hwstring_small";s:23:"height='76' width='128'";s:4:"file";s:92:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/iocbridge.jpg";s:5:"thumb";s:23:"iocbridge.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>PubSub.ISubscriptionAssembler</title>
<link>http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/pubsubisubscriptionassembler/</link>
<pubDate>Mon, 07 Jul 2008 11:39:11 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/07/isubscriptionassembler.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>9</wp:post_id>
<wp:post_date>2008-07-07 13:39:11</wp:post_date>
<wp:post_date_gmt>2008-07-07 11:39:11</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>pubsubisubscriptionassembler</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>12</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/isubscriptionassembler.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:242;s:6:"height";i:129;s:14:"hwstring_small";s:23:"height='68' width='128'";s:4:"file";s:105:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/isubscriptionassembler.jpg";s:5:"thumb";s:36:"isubscriptionassembler.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>PubSub.ISubscriptionManager</title>
<link>http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/pubsubisubscriptionmanager/</link>
<pubDate>Mon, 07 Jul 2008 11:39:28 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/07/isubscriptionmanager.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>10</wp:post_id>
<wp:post_date>2008-07-07 13:39:28</wp:post_date>
<wp:post_date_gmt>2008-07-07 11:39:28</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>pubsubisubscriptionmanager</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>12</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/isubscriptionmanager.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:244;s:6:"height";i:160;s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:103:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/isubscriptionmanager.jpg";s:5:"thumb";s:34:"isubscriptionmanager.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>PubSub.Overview</title>
<link>http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/pubsuboverview/</link>
<pubDate>Mon, 07 Jul 2008 11:39:51 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/07/overview.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>11</wp:post_id>
<wp:post_date>2008-07-07 13:39:51</wp:post_date>
<wp:post_date_gmt>2008-07-07 11:39:51</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>pubsuboverview</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>12</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/overview.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:1101;s:6:"height";i:715;s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:91:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/overview.jpg";s:5:"thumb";s:22:"overview.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>PubSub.Subscription</title>
<link>http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/pubsubsubscription/</link>
<pubDate>Mon, 07 Jul 2008 11:49:03 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/07/subscription.jpg</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>13</wp:post_id>
<wp:post_date>2008-07-07 13:49:03</wp:post_date>
<wp:post_date_gmt>2008-07-07 11:49:03</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>pubsubsubscription</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>12</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/subscription.jpg</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:291;s:6:"height";i:265;s:14:"hwstring_small";s:23:"height='96' width='105'";s:4:"file";s:95:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/07/subscription.jpg";s:5:"thumb";s:26:"subscription.thumbnail.jpg";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Yet another way to do publish &#38; subscribe Part III . . .</title>
<link>http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/</link>
<pubDate>Mon, 07 Jul 2008 14:42:34 +0000</pubDate>
<dc:creator>admin</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/07/07/yet-another-way-to-do-publish-subscribe-part-iii/</guid>
<description></description>
<content:encoded><![CDATA[
<p align="left">Today, I discuss the design of what I actually implemented. Please be aware that I do not claim that it’s the perfect solution to the concept at hand. It’s what I’ve come up with to implement it, which at least for my context works very well. With that being said, let’s dive into the design.</p>
The core of the design is formed by a class called <strong>Subscription</strong>.
<center><img src="http://bjro.de/__oneclick_uploads/2008/07/subscription.jpg" alt="PubSub.Subscription" /> </center>The name is quite self describing, but let me say some words about its intended purpose in my publish &amp; subscribe implementation. The subscription is used as an endpoint for sending messages to a subscriber, hiding away the thread context (<strong>SynchronizationContext</strong>) of the related subscriber instance and the weak reference handling to the related subscriber instance from the caller. It’s a kind of mediator instance so to say. Besides that it provides some information about which message type the subscription is for.Subscriptions are created by an implementation of the <strong>ISubscriptionAssembler </strong>interface. As the name implies the main responsibility of this interface is to create subscriptions either in an explicit (create a single subscription for a given <strong>ISubscriber&lt;TMessage&gt;</strong><tmessage> instance) or implicit (infer all subscriptions of a given instance / type) manner . . .</tmessage>
<p style="text-align: center"><img src="http://bjro.de/__oneclick_uploads/2008/07/isubscriptionassembler.jpg" alt="PubSub.ISubscriptionAssembler" /></p>
The current implementation (<strong>SubscriptionAssembler</strong>) uses a small wrapper around <strong>SynchronizationContext </strong>called <strong>SyncFactory </strong>to capture the thread context while building the subscription. All this factory does is that it registers a new <strong>SynchronizationContext </strong>via <strong>SyncronizationContext.Current</strong> when no context exists. This is especially useful when doing unit testing (which by default has no <strong>SynchronizationContext</strong> set).

Besides that the <strong>SubscriptionAssembler </strong>provides functionality to infer all subscriptions of a particular type and / or instance via reflection. This is done on top of the classes <strong>SubscriptionInspector </strong>and <strong>MessageInterestCache</strong>. The <strong>SubscriptionInspector </strong>realizes the relflection part, while the <strong>MessageInterestCache </strong>serves as a small cache for optimizing the performance of the assembler (message interests are only reflected once). Also included is a bit of functionality which can be used to pre-infer the message interests of a particular type, which might get handy when integrating with an InversionOfControl-container (most IoC-container split registration and type construction).

Once subscriptions have been created, they are managed by an implementation of the <strong>ISubscriptionManager </strong>interface. This means:
<ol>
	<li>Tracking all subscriptions for a particular message type (with operations for adding / releasing and retrieving subscriptions for a particular message type).</li>
	<li>Detecting and removing dead references (garbage collected instances).</li>
</ol>
<p style="text-align: center" align="left"><img src="http://bjro.de/__oneclick_uploads/2008/07/isubscriptionmanager.jpg" alt="PubSub.ISubscriptionManager" /></p>
The actual <strong>IMessageBus </strong>implementation called <strong>MessageBus </strong>is implemented only as a small wrapper around the <strong>ISubscriptionAssembler </strong>(for creating subscriptions) and the <strong>ISubscriptionManager </strong>(for adding and removing subscriptions explicitly). Here you can impression what is actually does:
<p style="margin: 0px"> <span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">MessageBus</span> : <span style="color: #2b91af">IMessageBus</span></p>
<p style="margin: 0px">{</p>
<p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">readonly</span> <span style="color: #2b91af">ISubscriptionManager</span> _SubscriptionManager;</p>
<p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">readonly</span> <span style="color: #2b91af">ISubscriptionAssembler</span> _SubscriptionAssembler;</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> MessageBus(</p>
<p style="margin: 0px">        <span style="color: #2b91af">ISubscriptionManager</span> subscriptionManager,</p>
<p style="margin: 0px">        <span style="color: #2b91af">ISubscriptionAssembler</span> subscriptionAssembler)</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: #2b91af">Ensure</span>.ArgumentIsNotNull(subscriptionManager, <span style="color: #a31515">"subscriptionManager"</span>);</p>
<p style="margin: 0px">        <span style="color: #2b91af">Ensure</span>.ArgumentIsNotNull(subscriptionAssembler, <span style="color: #a31515">"subscriptionAssembler"</span>);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        _SubscriptionManager = subscriptionManager;</p>
<p style="margin: 0px">        _SubscriptionAssembler = subscriptionAssembler;</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">void</span> AddSubscriber&lt;TMessage&gt;(</p>
<p style="margin: 0px">        <span style="color: #2b91af">ISubscriber</span>&lt;TMessage&gt; subscriber) <span style="color: blue">where</span> TMessage : <span style="color: blue">class</span></p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: #2b91af">Ensure</span>.ArgumentIsNotNull(subscriber, <span style="color: #a31515">"subscriber"</span>);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: #2b91af">Subscription</span> subscription = _SubscriptionAssembler.CreateSingle(</p>
<p style="margin: 0px">            subscriber);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        _SubscriptionManager.Add(subscription);</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">void</span> ReleaseSubscriber&lt;TMessage&gt;(</p>
<p style="margin: 0px">        <span style="color: #2b91af">ISubscriber</span>&lt;TMessage&gt; subscriber) <span style="color: blue">where</span> TMessage : <span style="color: blue">class</span></p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: #2b91af">Ensure</span>.ArgumentIsNotNull(subscriber, <span style="color: #a31515">"subscriber"</span>);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        _SubscriptionManager.ReleaseSubscription(subscriber);</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">public</span> <span style="color: blue">void</span> SendMessage&lt;TMessage&gt;(</p>
<p style="margin: 0px">        TMessage message) <span style="color: blue">where</span> TMessage : <span style="color: blue">class</span></p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: #2b91af">Ensure</span>.ArgumentIsNotNull(message, <span style="color: #a31515">"message"</span>);</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">var</span> subscriptions = _SubscriptionManager.GetSubscriptions(</p>
<p style="margin: 0px">            message.GetType());</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        <span style="color: blue">foreach</span> (<span style="color: #2b91af">Subscription</span> subscription <span style="color: blue">in</span> subscriptions)</p>
<p style="margin: 0px">        {</p>
<p style="margin: 0px">            subscription.SendMessage(message);</p>
<p style="margin: 0px">        }</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">}</p>
The interface to an InversionOfControl-container is the <strong>IocBridge</strong>.  This class is just a small mediator that can be used in combination with the extension method the container provides. It provides simple access points which call an <strong>ISubscriptionAssembler </strong>implementation, when an instance has been configured, try to infer all subscriptions when a new instance has been created and that release all subscriptions related to a particular instance when the instance has been removed from the container.
<p style="text-align: center"><img src="http://bjro.de/__oneclick_uploads/2008/07/iocbridge.jpg" alt="PubSub.IocBridge" /></p>
Regarding the design of the publish &amp; subscribe system that’s all there is to tell :-) .  Here is a little overview over all classes.

<a href="http://bjro.de/__oneclick_uploads/2008/07/overview.jpg" title="PubSub.Overview"></a>
<p style="text-align: center"><a href="http://bjro.de/__oneclick_uploads/2008/07/overview.jpg" title="PubSub.Overview"><img src="http://bjro.de/__oneclick_uploads/2008/07/overview.jpg" alt="PubSub.Overview" width="496" height="323" /></a></p>
In the last post I mentioned that my favourite IoC-container is Castle Windsor. In order to use the library there still is a little piece missing. I’ve integrated it with the WindsorContainer by implementing an IFacility.
<p style="background: white none repeat scroll 0% 0%; font-family: Consolas; font-size: 8pt; color: black; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">&nbsp;</p>
<p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">PubSubFacility</span> : <span style="color: #2b91af">AbstractFacility</span></p>
<p style="margin: 0px">{</p>
<p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: #2b91af">IIocBridge</span> _IocBridge;</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">protected</span> <span style="color: blue">override</span> <span style="color: blue">void</span> Init()</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        _IocBridge = Kernel.Resolve&lt;<span style="color: #2b91af">IIocBridge</span>&gt;();</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        Kernel.ComponentModelCreated +=</p>
<p style="margin: 0px">            OnComponentModelCreated;</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        Kernel.ComponentCreated +=</p>
<p style="margin: 0px">            OnComponentCreated;</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        Kernel.ComponentDestroyed +=</p>
<p style="margin: 0px">            OnComponentDestroyed;</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">void</span> OnComponentDestroyed(</p>
<p style="margin: 0px">        <span style="color: #2b91af">ComponentModel</span> model, <span style="color: blue">object</span> instance)</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        _IocBridge.UninstallInstance(instance);</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">void</span> OnComponentCreated(</p>
<p style="margin: 0px">        <span style="color: #2b91af">ComponentModel</span> model, <span style="color: blue">object</span> instance)</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        _IocBridge.TryInstallInstance(instance);</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    <span style="color: blue">private</span> <span style="color: blue">void</span> OnComponentModelCreated(</p>
<p style="margin: 0px">        <span style="color: #2b91af">ComponentModel</span> model)</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        _IocBridge.TryTypeInstallation(</p>
<p style="margin: 0px">            model.Implementation);</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">}</p>
Together with some xml the whole stuff can easily be wired together.
<p style="background: white none repeat scroll 0% 0%; font-family: Consolas; font-size: 8pt; color: black; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">&nbsp;</p>
<p style="margin: 0px"><span style="color: blue">&lt;</span><span style="color: #a31515">castle</span><span style="color: blue">&gt;</span></p>
<p style="margin: 0px"><span style="color: blue">    &lt;</span><span style="color: #a31515">components</span><span style="color: blue">&gt;</span></p>
<p style="margin: 0px"> <span style="color: blue">        &lt;</span><span style="color: #a31515">facilities</span><span style="color: blue">&gt;</span></p>
<p style="margin: 0px"><span style="color: blue">            &lt;</span><span style="color: #a31515">facility</span></p>
<p style="margin: 0px"><span style="color: blue">                </span><span style="color: red">id</span><span style="color: blue">=</span>"<span style="color: blue">PubSubFacility</span>"</p>

<p style="margin: 0px"><span style="color: blue">                </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.CastleContrib.PubSub.PubSubFacility,
BjRo.CastleContrib.PubSub</span>"<span style="color: blue"> /&gt;</span>
</p><p style="margin: 0px"><span style="color: blue">        &lt;/</span><span style="color: #a31515">facilities</span><span style="color: blue">&gt;</span></p>

<p style="margin: 0px"><span style="color: blue">
</span>

</p><p style="margin: 0px"><span style="color: blue">        &lt;</span><span style="color: #a31515">component</span><span style="color: blue"> </span><span style="color: red">id</span><span style="color: blue">=</span>"<span style="color: blue">PubSubFacade</span>"
<span style="color: blue">            </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.PubSub.IocBridge, </span><span style="color: blue">BjRo.PubSub</span>"
</p><p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">service</span><span style="color: blue">=</span>"<span style="color: blue">BjRo</span><span style="color: blue">.PubSub.</span><span style="color: blue">IIocBridge</span><span style="color: blue">, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">lifestyle</span><span style="color: blue">=</span>"<span style="color: blue">Singleton</span>"<span style="color: blue"> /&gt;</span></p>
<p style="margin: 0px"> <span style="color: blue">        &lt;</span><span style="color: #a31515">component</span><span style="color: blue"> </span><span style="color: red">id</span><span style="color: blue">=</span>"<span style="color: blue">MessageBus</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.PubSub.MessageBus, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">service</span><span style="color: blue">=</span>"<span style="color: blue">BjRo</span><span style="color: blue">.PubSub.IMessageBus, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">lifestyle</span><span style="color: blue">=</span>"<span style="color: blue">Singleton</span>"<span style="color: blue"> /&gt;</span></p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px"><span style="color: blue">        &lt;</span><span style="color: #a31515">component</span><span style="color: blue"> </span><span style="color: red">id</span><span style="color: blue">=</span>"<span style="color: blue">SubscriptionAssembler</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.PubSub</span><span style="color: blue">.SubscriptionAssembler, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">service</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.PubSub</span><span style="color: blue">.ISubscriptionAssembler, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">lifestyle</span><span style="color: blue">=</span>"<span style="color: blue">Singleton</span>"<span style="color: blue"> /&gt;</span></p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px"><span style="color: blue">        &lt;</span><span style="color: #a31515">component</span><span style="color: blue"> </span><span style="color: red">id</span><span style="color: blue">=</span>"<span style="color: blue">SubscriptionManager</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">type</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.PubSub</span><span style="color: blue">.SubscriptionManager, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">service</span><span style="color: blue">=</span>"<span style="color: blue">BjRo.PubSub</span><span style="color: blue">.ISubscriptionManager, </span><span style="color: blue">BjRo.PubSub</span>"</p>
<p style="margin: 0px"><span style="color: blue">            </span><span style="color: red">lifestyle</span><span style="color: blue">=</span>"<span style="color: blue">Singleton</span>"<span style="color: blue"> /&gt;</span></p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px"><span style="color: blue">    &lt;/</span><span style="color: #a31515">components</span><span style="color: blue">&gt;</span></p>
<p style="margin: 0px"><span style="color: blue">&lt;/</span><span style="color: #a31515">castle</span><span style="color: blue">&gt;</span></p>
<p style="margin: 0px">&nbsp;</p>
That’s it with my take on (local) publish &amp; subscribe. It may not be perfect but it suits my needs at the moment. I’m planning to integrate the standard .NET APM in the <strong>IMessageBus </strong>interface in order allow asynchronous message sending and the common rendezvous techniques. I’m looking forward to any feedback for my solution and would like to share the code under some OS license, if someone is interested in….]]></content:encoded>
<wp:post_id>12</wp:post_id>
<wp:post_date>2008-07-07 16:42:34</wp:post_date>
<wp:post_date_gmt>2008-07-07 14:42:34</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>yet-another-way-to-do-publish-subscribe-part-iii</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
	</item>
<item>
<title>Wow, this is interesting . . .</title>
<link>http://bjro.de/2008/07/19/wow-this-is-interesting/</link>
<pubDate>Sat, 19 Jul 2008 17:07:00 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/07/19/wow-this-is-interesting/</guid>
<description></description>
<content:encoded><![CDATA[.... Microsoft seems to move Dependency Injection as part of the general topic "application extensibillity" into the .NET Framework core. Have a look at the post of <a href="http://blogs.msdn.com/kcwalina/archive/2008/04/25/MEF.aspx" target="_blank">Krzysztof  Cwalina about the Managed Extensibillity Framework (MEF)</a>. Although the project has just started and is clearly at an early stage,  a first <a href="http://code.msdn.microsoft.com/mef" target="_blank">CTP</a> has already been published. I'm going to dig into the CTP soon,  mostly because of curiosity.  One of Microsofts technical evangelists (namely Jason Olson) has also published an arcticle showing <a href="http://http://www.managed-world.com/2008/07/04/BuildingAFluentInterfaceForMEF.aspx" target="_blank">how to build a small internal DSL on top of MEF</a>.

It will be interesting to see where Microsofts efforts in that area are leading to (especially when you consider that the core team is working on it) . . .]]></content:encoded>
<wp:post_id>14</wp:post_id>
<wp:post_date>2008-07-19 19:07:00</wp:post_date>
<wp:post_date_gmt>2008-07-19 17:07:00</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>wow-this-is-interesting</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
	</item>
<item>
<title>Using Extensionmethods in .NET 2.0 projects . . .</title>
<link>http://bjro.de/2008/07/28/using-extensionmethods-in-net-20-projects/</link>
<pubDate>Mon, 28 Jul 2008 08:18:33 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/07/28/using-extensionmethods-in-net-20-projects/</guid>
<description></description>
<content:encoded><![CDATA[While reading "C# in depth" by Jon Skeet I discovered a little gem. It is possible to use extension methods in .NET 2.0 projects when you're using VS2008 and its multitargeting abillities.

Extension methods are essentially only static methods in utillity classes with some constraints around them (the utility class has to be static too for instance.) The compiler and intellisense enable you to treat the method as if it were an instance method, but when you look inside the compiled IL you'll see that that's just a nice shortcut which is transformed to an actual call into the static method on the utility class.

So from a technical perspective there shouldn't be much that keeps us from using extension methods in .NET 2.0 targeted projects. A first try:
<p style="background: white none repeat scroll 0% 0%; font-family: Courier New; font-size: 8pt; color: black; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">&nbsp;</p>
<p style="margin: 0px"><span style="color: #2b91af">    8</span> [<span style="color: #2b91af">TestClass</span>]</p>
<p style="margin: 0px"><span style="color: #2b91af">    9</span> <span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">UnitTest1</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   10</span> {</p>
<p style="margin: 0px"><span style="color: #2b91af">   11</span>     [<span style="color: #2b91af">TestMethod</span>]</p>
<p style="margin: 0px"><span style="color: #2b91af">   12</span>     <span style="color: blue">public</span> <span style="color: blue">void</span> CanInvokeExtensionMethod()</p>
<p style="margin: 0px"><span style="color: #2b91af">   13</span>     {</p>
<p style="margin: 0px"><span style="color: #2b91af">   14</span>         <span style="color: #2b91af">MyClass</span> myClass = <span style="color: blue">new</span> <span style="color: #2b91af">MyClass</span>();</p>
<p style="margin: 0px"><span style="color: #2b91af">   15</span>         myClass.Do();</p>
<p style="margin: 0px"><span style="color: #2b91af">   16</span>     }</p>
<p style="margin: 0px"><span style="color: #2b91af">   17</span> }</p>
<p style="margin: 0px"><span style="color: #2b91af">   18</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   19</span> <span style="color: blue">internal</span> <span style="color: blue">class</span> <span style="color: #2b91af">MyClass</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   20</span> {</p>
<p style="margin: 0px"><span style="color: #2b91af">   21</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   22</span> }</p>
<p style="margin: 0px"><span style="color: #2b91af">   23</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   24</span> <span style="color: blue">internal</span> <span style="color: blue">static</span> <span style="color: blue">class</span> <span style="color: #2b91af">MyClassUtils</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   25</span> {</p>
<p style="margin: 0px"><span style="color: #2b91af">   26</span>     <span style="color: blue">public</span> <span style="color: blue">static</span> <span style="color: blue">void</span> Do(<span style="color: blue">this</span> <span style="color: #2b91af">MyClass</span> myClass)</p>
<p style="margin: 0px"><span style="color: #2b91af">   27</span>     {</p>
<p style="margin: 0px"><span style="color: #2b91af">   28</span></p>
<p style="margin: 0px"><span style="color: #2b91af">   29</span>     }</p>
<p style="margin: 0px"><span style="color: #2b91af">   30</span> }</p>
This doesn't compile: The error message send by the compiler is : " Cannot define a new extension method because the compiler required type 'System.Runtime.CompilerServices.ExtensionAttribute' cannot be found. Are you missing a reference to System.Core.dll?"

Now what comes to rescue? The current compiler only searches for the full typename and doesn't specify an assembly. If you create an attribute with the correct name and the correct namespace inside YOUR assembly the compiler warning disappears.
<p style="background: white none repeat scroll 0% 0%; font-family: Courier New; font-size: 8pt; color: black; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial">&nbsp;</p>
<p style="margin: 0px"><span style="color: #2b91af">   24</span> <span style="color: blue">namespace</span> System.Runtime.CompilerServices</p>
<p style="margin: 0px"><span style="color: #2b91af">   25</span> {</p>
<p style="margin: 0px"><span style="color: #2b91af">   26</span>     <span style="color: blue">public</span> <span style="color: blue">class</span> <span style="color: #2b91af">ExtensionAttribute</span> : <span style="color: #2b91af">Attribute</span> { }</p>
<p style="margin: 0px"><span style="color: #2b91af">   27</span> }</p>
That beeing done the build succeeds and I've got a smile on my face .....]]></content:encoded>
<wp:post_id>15</wp:post_id>
<wp:post_date>2008-07-28 10:18:33</wp:post_date>
<wp:post_date_gmt>2008-07-28 08:18:33</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>using-extensionmethods-in-net-20-projects</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:comment>
<wp:comment_id>5</wp:comment_id>
<wp:comment_author>Stefan Lieser</wp:comment_author>
<wp:comment_author_email>stefan@lieser-online.de</wp:comment_author_email>
<wp:comment_author_url>http://lieser-online.de</wp:comment_author_url>
<wp:comment_author_IP>92.72.1.132</wp:comment_author_IP>
<wp:comment_date>2008-08-01 19:16:53</wp:comment_date>
<wp:comment_date_gmt>2008-08-01 17:16:53</wp:comment_date_gmt>
<wp:comment_content>You use lambdas do you? And you use auto properties and initializers? The only thing you can't use with C# 3.0 compiler and 2.0 Framework ist LINQ, the coolest of the new features :-(</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>6</wp:comment_id>
<wp:comment_author>BjRo</wp:comment_author>
<wp:comment_author_email>bjoern@bjro.de</wp:comment_author_email>
<wp:comment_author_url>http://www.bjro.de</wp:comment_author_url>
<wp:comment_author_IP>81.173.255.70</wp:comment_author_IP>
<wp:comment_date>2008-08-01 21:57:24</wp:comment_date>
<wp:comment_date_gmt>2008-08-01 19:57:24</wp:comment_date_gmt>
<wp:comment_content>Yeah, I'm using most of the C# 3.0 capabillities that are applicable for .NET 2.0 (Lamdas rule :-) )  with one exception, the var-keyword.  I'm still undecided whether to embrace it or not. 

One of my colleagues writes most of his code with implicit typing now, but personally, although the code is shorter, I find it harder to read ....</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
	</item>
<item>
<title>RibbonImage</title>
<link>http://bjro.de/2008/08/10/implementing-a-fluent-api-for-the-ribbon/ribbonimage/</link>
<pubDate>Wed, 06 Aug 2008 17:31:54 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/08/office2007ribbon.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>17</wp:post_id>
<wp:post_date>2008-08-06 19:31:54</wp:post_date>
<wp:post_date_gmt>2008-08-06 17:31:54</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ribbonimage</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>16</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/08/office2007ribbon.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:1280;s:6:"height";i:141;s:14:"hwstring_small";s:23:"height='14' width='128'";s:4:"file";s:99:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/08/office2007ribbon.png";s:5:"thumb";s:30:"office2007ribbon.thumbnail.png";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Ribbon.Small</title>
<link>http://bjro.de/?attachment_id=18</link>
<pubDate>Thu, 07 Aug 2008 17:54:49 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/08/office2007ribbonsmall.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>18</wp:post_id>
<wp:post_date>2008-08-07 19:54:49</wp:post_date>
<wp:post_date_gmt>2008-08-07 17:54:49</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ribbonsmall</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>-1218131586</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/08/office2007ribbonsmall.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:640;s:6:"height";i:70;s:14:"hwstring_small";s:23:"height='14' width='128'";s:4:"file";s:104:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/08/office2007ribbonsmall.png";s:5:"thumb";s:35:"office2007ribbonsmall.thumbnail.png";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Implementing a fluent API for the ribbon</title>
<link>http://bjro.de/2008/08/10/implementing-a-fluent-api-for-the-ribbon/</link>
<pubDate>Sun, 10 Aug 2008 18:07:44 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Domain Specific Languages]]></category>

<guid isPermaLink="false">http://bjro.de/2008/08/10/implementing-a-fluent-api-for-the-ribbon/</guid>
<description></description>
<content:encoded><![CDATA[For the last two weeks I've been engaged in implementing an internal Domain Specific Language (DSL) for dealing with the ribbon in a Windows Forms composite client. For those of you who haven't heard of the ribbon before, it's the <a href="http://en.wikipedia.org/wiki/Ribbon_(computing)" target="_blank">new user interface microsoft introduced with MS Office 2007</a>.  Those two weeks have really been interesting, mostly because this was the first time I actually tried to build a large internal DSL. In this post I would like to talk a bit about internal dsls,  the implementation of the ribbon dsl and what I learned from those two weeks . . .

<strong>So, what is actually an internal dsl?</strong>

So what is an internal dsl actually? An internal dsl is basically just another style of an API, which follows a more language-oriented approach. Instead of following the classic <a href="http://martinfowler.com/bliki/CommandQuerySeparation.html" target="_blank">CommandQuerySeparation</a> - principle, it encourages a more fluent style of programming, which when read out loud by a reader is intent revealing enough to understand what the code basically does. Martin Fowler and Eric Evans coined the term fluent API to describe this behavior, which I will use too in the rest of this post. Source code and pictures usally say more than a hundred words, so here a some examples for fluent APIs.
<u></u>
<p style="margin: 0px"><u>Container-configuration in Castle Windsor:</u></p>
<u></u>
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"><font size="2"> container.Register(</font></p>
<p style="margin: 0px"><font size="2">       <span style="color: #2b91af">Component</span>.For&lt;<span style="color: #2b91af">ICommand</span>&gt;()</font></p>
<p style="margin: 0px"><font size="2">               .Named(<span style="color: #2b91af">CommandNames</span>.StartSearch)</font></p>
<p style="margin: 0px"><font size="2">               .ImplementedBy&lt;<span style="color: #2b91af">SearchCommand</span>&gt;()</font></p>
<p style="margin: 0px"><font size="2">               .LifeStyle.Singleton);</font></p>
</td>
</tr>
</table>
<u>Assertions with the constraint - API in NUnit:</u>
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td><font size="2"><span style="color: #2b91af">Assert</span>.That(<span style="color: #a31515">"Foo"</span>, <span style="color: #2b91af">Is</span>.Not.Null);</font></td>
</tr>
</table>
<u>Fluent Mocking with Rhino.Mocks:</u>
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td><font size="2"><span style="color: blue">using</span> (Record())</font><font size="2">
{
</font><span style="color: #2b91af"><font size="2">  </font></span><font size="2">     <span style="color: #2b91af">Expect</span>.Call<span style="color: #2b91af"></span>(_FormFactory.LoadForm(config)).
</font><span style="color: #2b91af"><font size="2">  </font></span><font size="2">         .IgnoreArguments()
</font><span style="color: #2b91af"><font size="2">  </font></span><font size="2">         .Return(<span style="color: blue">new</span> <span style="color: #2b91af">DummyForm</span>())
</font><span style="color: #2b91af"><font size="2">  </font></span><font size="2">         .Constraints(<span style="color: blue">new</span> <span style="color: #2b91af">ValidFormConfigurationConstraint</span>());
}</font></td>
</tr>
</table>
Did you notice one thing the examples above all have in common? Yes, they' re all  OSS. A lot of OSS-projects  have embraced fluent APIs in the past or seem to embrace this API style lately. Although they're currently just the minority of existing APIs out there, it's interesting to watch the emergence of more language-oriented APIs, even in the .NET Framework core. I think nobody hits me with a stick when I say that Linq can be described as an internal dsl for querying data. (McFly, anybody at home :-) )You may have guessed it, I like fluent APIs a lot. I won't say are applicable everywhere, but personally I think there are places where they can give you quite a bit advantage in readability and testability over regular APIs. Especially configuration and specification scenarios are very well suited for fluent apis.

<strong>Possible ingredients of a fluent API</strong>

<u>Method chaining</u>

The basic idea of method-chaining is that you directly use the return value of a method in order to invoke  a method on it and repeat this as long as needed in order to make sense as a complete sentence. The easiest way to achieve this is a class whose methods all return a this reference. Here’s a simplified example of something I’ve written earlier this year. It’s a kind of specification that describes the details of a form which a form framework should create. Don't worry about the details. This is just a shortened example.

This is part of the class definition . . .
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2"> </font></span><font size="2"><span style="color: blue">internal</span> <span style="color: blue">class</span> <span style="color: #2b91af">FormCreationExpression</span>     <span style="color: #2b91af"></span></font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2"> </font></span><font size="2">{</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     <span style="color: blue">public</span> FormCreationExpression(</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         <span style="color: #2b91af">Guid</span> formId)</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     {</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         _Configuration = <span style="color: blue">new</span> <span style="color: #2b91af">FormConfiguration</span>(</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">             formId);</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     }</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     <span style="color: blue">public</span> <span style="color: #2b91af">FormCreationExpression</span><span style="color: #2b91af"></span> WithBinding&lt;T&gt;(</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         T instance)</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">  </font></span><font size="2">     {</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         _Configuration.AddBinding&lt;T&gt;(instance);</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         <span style="color: blue">return</span> <span style="color: blue">this</span>;</font></p>
<span style="color: #2b91af"><font size="2">   </font></span><font size="2">     }
</font></td>
</tr>
</table>
. . .  combined with a static entry point like this . . .
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"> <span style="color: #2b91af"></span><font size="2"><span style="color: blue">public</span> <span style="color: blue">static</span> <span style="color: blue">class</span> <span style="color: #2b91af">From</span></font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2"> </font></span><font size="2">{</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     <span style="color: blue">public</span> <span style="color: blue">static</span> <span style="color: #2b91af">FormCreationExpression</span> Template(</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         <span style="color: #2b91af">Guid</span> formId)</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     {</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">         <span style="color: blue">return</span> <span style="color: blue">new</span> <span style="color: #2b91af">FormCreationExpression</span>(</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">             formId);</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">   </font></span><font size="2">     }</font></p>
<p style="margin: 0px"><span style="color: #2b91af"></span><font size="2">}</font></p>
</td>
</tr>
</table>
. . .  it can be used like this:
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td><font size="2"><span style="color: #2b91af">IClientForm</span> form = _FormFactory.CreateForm(
</font><span style="color: #2b91af"><font size="2">  </font></span><font size="2">     <span style="color: #2b91af">From</span>.Template(templateId)
</font><span style="color: #2b91af"><font size="2">  </font></span><font size="2">         .WithBinding(patient));</font></td>
</tr>
</table>
<span style="color: #2b91af"></span>One personal note to method chaining:

If you're using a mock framework like for instance Rhino.Mocks better don't try to mock out a fluent interface. Find other ways to test it. So, why am I saying this? Most mocking framework don't have a natural syntax for configuring the expectations on fluent apis (except <a href="http://www.typemock.com" target="_blank">TypeMock</a>). Because of that you have to configure every call on the chain step by step, which is  a) very tedious and b) also results in not well readable tests (which mostly smell, too).

The form example above is what I mostly do in order to get better testability. I mostly use fluent APIs as builders, which produce something I can easily test / verify. (In the example above it's the configured FormExpression.)

<u>Fluent and Expression Builders</u>

Most of the fluent API's I created used fluent builder. The basic pattern for fluent builder can be easily described: Method chaining + an implicit conversion operator for the convertion into the build product.
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"> <span style="color: #2b91af"></span><font size="2"><span style="color: blue">public</span> <span style="color: blue">static</span> <span style="color: blue">implicit</span> <span style="color: blue">operator</span> <span style="color: #2b91af">FormConfiguration</span>(</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">       </font></span><font size="2"><span style="color: #2b91af">FormExpression</span> expression)</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">  </font></span><font size="2"> {</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">        </font></span><font size="2">     <span style="color: blue">return</span> expression._Configuration;</font></p>
<p style="margin: 0px"><span style="color: #2b91af"><font size="2">  </font></span><font size="2"> }</font></p>
</td>
</tr>
</table>
When I was implementing the ribbon fluent API however, I used a variation of a different pattern which is called Expression Builder. The idea of the Expression Builder pattern is that the fluent API only is layer on top of a regular API. It serves as a kind of facade to the other api. This was especially useful because I didn't want the ribbon API to be coupled to a particular vendor implementation. Instead the API uses interfaces and a facade in order to perform actions on the concrete ribbon control. Please have a bit patience, I'll show code soon.  Read <a href="http://martinfowler.com/dslwip/ExpressionBuilder.html" target="_blank">here</a> for a bit more on Expression Builders.

<u>Nested functions</u>

On problem with fluent APIs implemented only with  method chaining is extensibility or reusability.  A short example. Let's assume we have a typical OO situation with two products having a lot of properties in common but also some special ones. Let us further assume that we want to build fluent builders for each of them. One approach is to use a fluent builder base class and derived builders for each product. When you do this you have an API in which some of the methods (those implemented by the builder base class) return only a subset of the API (because they only return an instance of the base class). In order to use the methods of the derived fluent builder in combination with those of the base class you have to call the special methods first before continuing with the base class method in the fluent chain. You can get around this (look <a href="http://sergeyshishkin.spaces.live.com/blog/cns!9F19E53BA9C1D63F!218.entry" target="_blank">here</a>)  for more informations) with redefinition and the new operator, but imho it doesn't smell very good. However I haven't found a solution which solves the problem <strong>and</strong> makes me happy. Has anyone found a better solution? I would like to hear other thoughts on this.

With that beeing said, how can extensibility be tackled without sacrificing the language orientation. That's where Nested Functions come into play. The basic idea is that you compose your fluent API out of several independant parts/ functions. A good example for this is the constraint API that NUnit provides. Look at the signature of the That method of the Assert class.
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"> <span style="color: blue"><font size="2">public</font></span><font size="2"> <span style="color: blue">class</span> <span style="color: #2b91af">Assert</span></font></p>
<p style="margin: 0px"><font size="2"> {</font></p>

<p style="margin: 0px"><font size="2"> <span style="color: blue">      public</span> <span style="color: blue">void</span> That(<span style="color: blue">object</span> obj, <span style="color: #2b91af">Constraint</span> constraint)
</font></p></td>
</tr>
</table>
Doesnt really look fluent first, doesn't it? But combined with a static entrypoint and a derived constraint NUnit is able to achive a very nice and well readable syntax for specifiing tests.
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"> <span style="color: blue"></span><font size="2"><span style="color: blue"></span><span style="color: #2b91af">Assert</span><span style="color: blue"></span><span style="color: blue"></span>.That(obj, <span style="color: #2b91af">Is.</span>Not.Null)</font></p>
</td>
</tr>
</table>
For me this API is just a single piece of beauty. Awesome :-) . You can read more about Nested Functions <a href="http://martinfowler.com/dslwip/NestedFunction.html" target="_blank">here</a>. That's all I' d wanted to show you about fluent APIs in this post.  If you're interested in learning more about fluent APIs I would highly recommend Martin Fowlers<a href="http://martinfowler.com/dslwip/InternalOverview.html" target="_blank"> current articles</a> about dsls. Although  they're work in progress (as part of an upcoming book),  I consider them best resource for learning about dsls available at the moment. Before I'll show bit from the ribbon API I want to give you an impression what the actual requirements for the API were.

<strong>The basic requirements for the ribbon API</strong>
<ol>
	<li>The API should provide benefit in a composite (windows forms) architecture, where modules are loosly coupled and UI configuration is scattered through several modules. From a product level perspective the API should enable very exact (and relative) positioning  of elements while the load order of modules might change.</li>
	<li>The interaction with the ribbon should be testable with unit tests.</li>
	<li>Consumer code of the API should not be coupled to a particular vendor implementation of the ribbon.</li>
	<li>Consumer code should be able to configure the ribbon from any thread.</li>
	<li>Configuration via an external XML - file should be possible (although not implemented in the current version).</li>
</ol>
<strong>An internal dsl for the ribbon</strong>

One of my earliest design decisions was to design the ribbon API to  be based  on the command pattern internally. The decoupling that was possible with such a design  allows a good level of control over the execution of the commands (which is very important while initializing modules (Requirement 1) ). Besides that commands are a good candidate for testability, because the configuration of the commands can be tested via unit tests whithout actually having to execute them. Because of that i decided to implement a little variation of the Fluent / Expression Builder topic.  Let's look at some code. There are four static entrypoints for creating fluent (command) builders. These are

the <strong>Create</strong>-class for creating commands, which create elments on the ribbon,
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"> <span style="color: #2b91af"><font size="1">CreateNew</font></span><font size="1">.Tab.Named(<span style="color: #2b91af">RibbonTabNames</span>.Home)</font></p>
<p style="margin: 0px"><font size="1">    .WithCaption(<span style="color: #2b91af">SR</span>.HomeTabCaption)</font></p>
<p style="margin: 0px"><font size="1">    .AddGroups(</font></p>
<p style="margin: 0px"><font size="1">        <span style="color: #2b91af">CreateNew</span>.Group.Named(<span style="color: #2b91af">RibbonGroupNames</span>.SearchGroup)</font></p>
<p style="margin: 0px"><font size="1">            .WithCaption(<span style="color: #2b91af">SR</span>.SearchGroupCaption)</font></p>
<p style="margin: 0px"><font size="1">            .WithVerticalLayout()</font></p>
<p style="margin: 0px"><font size="1">            .WithToolsAlignedCentered()</font></p>
<p style="margin: 0px"><font size="1">            .AddTools(</font></p>
<p style="margin: 0px"><font size="1">                <span style="color: #2b91af">CreateNew</span>.TextBox.Named(<span style="color: #2b91af">ToolNames</span>.SearchTextBox)</font></p>
<p style="margin: 0px"><font size="1">                    .RaisingCommandOnReturn(<span style="color: #2b91af">CommandNames</span>.StartSearch),</font></p>
<p style="margin: 0px"><font size="1">                <span style="color: #2b91af">CreateNew</span>.Button.Named(<span style="color: #2b91af">ToolNames</span>.SearchButton)</font></p>
<p style="margin: 0px"><font size="1">                    .WithCaption(<span style="color: #2b91af">SR</span>.SearchButtonCaption)</font></p>
<p style="margin: 0px"><font size="1">                    .WithLargeImage(<span style="color: #2b91af">Images</span>.Search_32)</font></p>
<p style="margin: 0px"><font size="1">                    .WithSmallImage(<span style="color: #2b91af">Images</span>.Search_16)</font></p>
<p style="margin: 0px"><font size="1">                    .DisplayedAsLargeToolWithCaptionBelow()</font></p>
<p style="margin: 0px"><font size="1">                    .RaisingCommand(<span style="color: #2b91af">CommandNames</span>.StartSearch)));</font></p>
</td>
</tr>
</table>
the <strong>Enable </strong>and the <strong>Disable </strong>class  for creating commands, which enable or disable  elements on the ribbon,
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"><font size="2"><span style="color: #2b91af">Enable</span>.Tool(<span style="color: #2b91af">ToolNames</span>.SearchButton)</font></p>
<p style="margin: 0px"><font size="2">    .If(() =&gt; shouldActivate);</font></p>
</td>
</tr>
</table>
the <strong>ChangeVisibilityOf </strong>class for creating commands, which change the visibillity of elements on the ribbon,
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td><span style="color: #2b91af"><font size="2">ChangeVisibilityOf</font></span><font size="2">.Tool(<span style="color: #2b91af">ToolNames</span>.SearchButton)
.ToInvisible()
.If(() =&gt; shouldBeInvisible);
</font></td>
</tr>
</table>
and the <strong>Access </strong>class for creating commands, which perform other read or write operations on elements on the ribbon.
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"> <span style="color: #2b91af"><font size="2">Access</font></span><font size="2">.TextBox(<span style="color: #2b91af">ToolNames</span>.SearchTextBox)</font></p>
<p style="margin: 0px"><font size="2">    .ReadText( text =&gt; DisplayText(text) );</font></p>
</td>
</tr>
</table>
The commands execute against a internal facade for the ribbon. This facade is completely based on interfaces and can be adapted to different vendor APIs (at least thats the idea :-)).  This is the regular API to which I referred when I talked about Expression Builder previously. The next code sample shows the implementation of the NewTabCommand for creating new tabs on the ribbon.
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"><span style="color: blue"><font size="2">internal</font></span><font size="1"> <span style="color: blue">class</span> <span style="color: #2b91af">NewTabCommand</span> : <span style="color: #2b91af">ShellCommand</span></font></p>
<p style="margin: 0px"><font size="1">{</font></p>
<p style="margin: 0px"><font size="1">    <span style="color: blue">public</span> NewTabCommand(</font></p>
<p style="margin: 0px"><font size="1">        <span style="color: #2b91af">RibbonTabConfiguration</span> configuration,</font></p>
<p style="margin: 0px"><font size="1">        <span style="color: #2b91af">IEnumerable</span>&lt;<span style="color: #2b91af">NewGroupCommand</span>&gt; groupBuilderCommands)</font></p>
<p style="margin: 0px"><font size="1">    {</font></p>
<p style="margin: 0px"><font size="1">        Configuration = configuration;</font></p>
<p style="margin: 0px"><font size="1">        GroupBuilderCommands = groupBuilderCommands;</font></p>
<p style="margin: 0px"><font size="1">    }</font></p>
<p style="margin: 0px"><font size="1"> </font></p>
<p style="margin: 0px"><font size="1">    <span style="color: blue">internal</span> <span style="color: #2b91af">RibbonTabConfiguration</span> Configuration { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }</font></p>
<p style="margin: 0px"><font size="1">    <span style="color: blue">internal</span> <span style="color: #2b91af">IEnumerable</span>&lt;<span style="color: #2b91af">NewGroupCommand</span>&gt; GroupBuilderCommands { <span style="color: blue">get</span>; <span style="color: blue">set</span>; }</font></p>
<p style="margin: 0px"><font size="1"> </font></p>
<p style="margin: 0px"><font size="1">    <span style="color: blue">public</span> <span style="color: blue">override</span> <span style="color: blue">void</span> Execute()</font></p>
<p style="margin: 0px"><font size="1">    {</font></p>
<p style="margin: 0px"><font size="1">        <span style="color: #2b91af">IRibbonTab</span> tab = GetShell().CreateTab(Configuration);</font></p>
<p style="margin: 0px"><font size="1"> </font></p>
<p style="margin: 0px"><font size="1">        <span style="color: blue">foreach</span> (<span style="color: #2b91af">NewGroupCommand</span> command <span style="color: blue">in</span> GroupBuilderCommands)</font></p>
<p style="margin: 0px"><font size="1">        {</font></p>
<p style="margin: 0px"><font size="1">            command.OverrideTabSetting(tab);</font></p>
<p style="margin: 0px"><font size="1">            command.Execute();</font></p>
<p style="margin: 0px"><font size="1">        }</font></p>
<p style="margin: 0px"><font size="1">    }</font></p>
<font size="1">}</font></td>
</tr>
</table>
Commands are executed with the ICommandExecutor. Main responsibility of the service is to allow thread safe access to the ribbon (which runs in the UI thread), so that the module initialization can run multi-threaded. Is has several overloads for running commands. This is one of them:
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"><span style="color: blue"><font size="2">public</font></span><font size="2"> <span style="color: blue">void</span> ExecuteCommand(<span style="color: #2b91af">Command</span> command)</font></p>
<p style="margin: 0px"><font size="2">{</font></p>
<p style="margin: 0px"><font size="2">    <span style="color: #2b91af">Ensure</span>.ArgumentIsNotNull(command, <span style="color: #a31515">"command"</span>);</font></p>
<p style="margin: 0px"><font size="2"> </font></p>
<p style="margin: 0px"><font size="2">    <span style="color: blue">if</span> (command.IsAvailable())</font></p>
<p style="margin: 0px"><font size="2">    {</font></p>
<p style="margin: 0px"><font size="2">        _ThreadContextOfMainThread.Send(</font></p>
<p style="margin: 0px"><font size="2">            c =&gt; command.Execute(), <span style="color: blue">null</span>);</font></p>
<p style="margin: 0px"><font size="2">    }</font></p>
<p style="margin: 0px"><font size="2">}</font></p>
</td>
</tr>
</table>
To complete the picture I wrote custom assertion  to make testing easy.
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px"><font size="1">[<span style="color: #2b91af">Test</span>]</font></p>
<p style="margin: 0px"><span style="color: blue"><font size="1">public</font></span><font size="1"> <span style="color: blue">void</span> Command_with_false_condition_should_not_enable_tool()</font></p>
<p style="margin: 0px"><font size="1">{</font></p>
<p style="margin: 0px"><font size="1">    <span style="color: #2b91af">Command</span> command = <span style="color: #2b91af">Enable</span>.Tool(<span style="color: #a31515">"Foo"</span>).If(() =&gt; <span style="color: blue">false</span>);</font></p>
<p style="margin: 0px"><font size="1"> </font></p>
<p style="margin: 0px"><font size="1">    <span style="color: #2b91af">Assert</span>.That(command, <span style="color: #2b91af">DoesNotEnable</span>.Tool(<span style="color: #a31515">"Foo"</span>));</font></p>
<font size="1">}</font></td>
</tr>
</table>
<strong>Some final thoughts to conclude this post:</strong>

It's  harder than I orignally thought  to create large fluent APIs in C#. Especially code reuse and extensibility can be barriers. C# as a statically typed language  is somehow limited here (One more reason to learn more about Ruby and Boo . . .). I'm particulary don't like reusability through builder inheritance and method redefinition, though I'm doing it because of a lack of options. Again, does anyone know a way in C# around this? Finally I really like the readability and testability of what I've implemented, although there is still a lot space for improvements.  Feel free to post (positive and negative) thoughts  on this or domain specific languages in general.

Read you soon :-)]]></content:encoded>
<wp:post_id>16</wp:post_id>
<wp:post_date>2008-08-10 20:07:44</wp:post_date>
<wp:post_date_gmt>2008-08-10 18:07:44</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>implementing-a-fluent-api-for-the-ribbon</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:comment>
<wp:comment_id>7</wp:comment_id>
<wp:comment_author>Stefan Lieser</wp:comment_author>
<wp:comment_author_email>stefan@lieser-online.de</wp:comment_author_email>
<wp:comment_author_url>http://lieser-online.de</wp:comment_author_url>
<wp:comment_author_IP>194.77.192.53</wp:comment_author_IP>
<wp:comment_date>2008-08-11 12:03:51</wp:comment_date>
<wp:comment_date_gmt>2008-08-11 10:03:51</wp:comment_date_gmt>
<wp:comment_content>Great post!!

What I don't understand is the enabling/disabling story:
Enable.Tool(ToolNames.SearchButton)
    .If(() =&gt; shouldActivate);
Is 'shouldActivate' a delegate that decides whether the command should be enabled? I think it would be better if the commands would know if they are enabled.

Btw. Boo isn't dynamically typed but static like C#. The difference is that C# is (mostly) explicit static typed whereas Boo is implicit static (like F# for example).

Cheers,
Stefan</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>8</wp:comment_id>
<wp:comment_author>BjRo</wp:comment_author>
<wp:comment_author_email>bjoern@bjro.de</wp:comment_author_email>
<wp:comment_author_url>http://www.bjro.de</wp:comment_author_url>
<wp:comment_author_IP>195.78.40.65</wp:comment_author_IP>
<wp:comment_date>2008-08-11 13:02:12</wp:comment_date>
<wp:comment_date_gmt>2008-08-11 11:02:12</wp:comment_date_gmt>
<wp:comment_content>@Stefan

The If method takes a delegate which is evaluated when the command executes. There also exists an overload with a boolean which is evaluated at configuration time. I've found this conditional stuff useful in the past.  However if you don't need it Enable.Tool("xyz") or Disable.Tool("xyz") alone create valid commands who know their internal state.

Regarding Boo: Interesting, didn't know that. Complements my feeling that I need to learn more about it :-)</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>10</wp:comment_id>
<wp:comment_author>Stefan Lieser</wp:comment_author>
<wp:comment_author_email>stefan@lieser-online.de</wp:comment_author_email>
<wp:comment_author_url>http://lieser-online.de</wp:comment_author_url>
<wp:comment_author_IP>194.77.192.53</wp:comment_author_IP>
<wp:comment_date>2008-08-11 14:27:51</wp:comment_date>
<wp:comment_date_gmt>2008-08-11 12:27:51</wp:comment_date_gmt>
<wp:comment_content>Where do you define the delegate that decides whether to enable/disable the command?
I would expect the enable/disable decision to be a responsibility of the command itself. So I would try to replace the delegate call by a method call into the command object. That implies of course that the command object has enough context to decide if it is enabled (which should be no problem because you use Windsor, so you may inject any needed dependency into the commands).</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>11</wp:comment_id>
<wp:comment_author>BjRo</wp:comment_author>
<wp:comment_author_email>bjoern@bjro.de</wp:comment_author_email>
<wp:comment_author_url>http://www.bjro.de</wp:comment_author_url>
<wp:comment_author_IP>195.78.40.65</wp:comment_author_IP>
<wp:comment_date>2008-08-11 17:20:50</wp:comment_date>
<wp:comment_date_gmt>2008-08-11 15:20:50</wp:comment_date_gmt>
<wp:comment_content>Here is an actual usage example: 

The whole stuff is used inside a little MVP-framework where an IPresenter interface and an abstract Presenter<tview> base class exists. All IPresenters are displayed in Regions (the same concept as in PRISM, for instance a TabRegion), which call methods on the IPresenter interface in order to Activate/Deactivate/etc. presenters. The Presenter</tview><tview> base class implements some hook methods which can be overriden in derived presenters in oder to react to these events. This might look like this (code from a presenter):

protected override void ActivateCore()
{
	ExecuteCommands(
		Enable.Tool(ToolNames.SaveButton)
                     .If(IsDirty));
}

where ExecuteCommands does this:

protected void ExecuteCommands(params Command[] commands)
{
	foreach (Command command in commands)
	{
	      _CommandExecutor.Execute(command);
	}
}

With this design the enable/disable decision is a responsibility of the PRESENTER based on its internal data (at least as it's currently implemented).

Cheers 
Björn</tview></wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
	</item>
<item>
<title>Some words regarding MSTest</title>
<link>http://bjro.de/2008/08/19/some-words-regarding-mstest/</link>
<pubDate>Tue, 19 Aug 2008 19:41:50 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Testing]]></category>

<guid isPermaLink="false">http://bjro.de/2008/08/19/some-words-regarding-mstest/</guid>
<description></description>
<content:encoded><![CDATA[Today I stumbled again about this and feel (once more) a bit frustrated about the current version of <strong>MSTest</strong>.

In theory Visual Studio VS2008 supports Test-Class-Inheritance. Once you actually start using it, you pretty fast encounter one big limitation:

-&gt; The test base class must be in the same assembly as the derived test &lt;-

Mh,  is that such an uncommon scenario that it's not supported? Personally I don't think so. What about BDD extensions for MSTest? Do I need to have a Specification-base class in each test assembly? Oh, c'mon ?!

Just when you think it can't get worse, you realize that

-&gt; Tests using Test-Class-Inheritance are NOT EXECUTED when running inside a VS TFS 2008 TeamBuild &lt;--

Awesome :-(

Besides that we also still have the *.vsmdi-hell (Replace * with the name your Solution and a number between 1 and 100 . . .), but that a different story.

If it was my personal decision I would ditch MSTest right away. It'll be interesting to see whether I'm able to convince our development leads to go down that road . . .]]></content:encoded>
<wp:post_id>20</wp:post_id>
<wp:post_date>2008-08-19 21:41:50</wp:post_date>
<wp:post_date_gmt>2008-08-19 19:41:50</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>some-words-regarding-mstest</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:comment>
<wp:comment_id>20</wp:comment_id>
<wp:comment_author>Sergey Shishkin</wp:comment_author>
<wp:comment_author_email>sergey.shishkin@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://shishkin.org</wp:comment_author_url>
<wp:comment_author_IP>62.143.194.47</wp:comment_author_IP>
<wp:comment_date>2008-08-20 13:04:40</wp:comment_date>
<wp:comment_date_gmt>2008-08-20 11:04:40</wp:comment_date_gmt>
<wp:comment_content>+1, let's review other products and select the optimal one.</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>21</wp:comment_id>
<wp:comment_author>Rainer Schuster</wp:comment_author>
<wp:comment_author_email>schuster-rainer@web.de</wp:comment_author_email>
<wp:comment_author_url>http://dotnet-forum.de/blogs/rainerschuster</wp:comment_author_url>
<wp:comment_author_IP>77.190.21.47</wp:comment_author_IP>
<wp:comment_date>2008-08-20 23:41:21</wp:comment_date>
<wp:comment_date_gmt>2008-08-20 21:41:21</wp:comment_date_gmt>
<wp:comment_content>+1, nice IDE-integrated tool. Seems sometimes odd to me. Especially the execution time is n times slower the with the open source ones. Same experience?

ATM I'm running my Tests with MbUnit and NUnit mixed. The Assert.That and SyntaxHelpers from NUnit. Looking forward NUnits production release of the 2.5 branch with the Assert.Throws addition.

Also looking forward for Gallio with support for NBehave and the all-in-one Testrunner Icarus ...</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>23</wp:comment_id>
<wp:comment_author>BjRo</wp:comment_author>
<wp:comment_author_email>bjoern@bjro.de</wp:comment_author_email>
<wp:comment_author_url>http://www.bjro.de</wp:comment_author_url>
<wp:comment_author_IP>195.78.40.65</wp:comment_author_IP>
<wp:comment_date>2008-08-21 17:22:29</wp:comment_date>
<wp:comment_date_gmt>2008-08-21 15:22:29</wp:comment_date_gmt>
<wp:comment_content>Same experience :-). As said this was not the first time I felt unhappy with that tool.

I've worked NUnit, but haven't looked into MbUnit, NBehave, etc. yet. Is there a particular reason why you're using both NUnit and MbUnit (besides the NUnit syntax)?  

Regards,
Björn
</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
	</item>
<item>
<title>NHibernateTransactions</title>
<link>http://bjro.de/2008/08/22/ambient-transactions-and-nhibernate/nhibernatetransactions/</link>
<pubDate>Fri, 22 Aug 2008 14:43:59 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/__oneclick_uploads/2008/08/nhibernatetransactions.png</guid>
<description></description>
<content:encoded><![CDATA[]]></content:encoded>
<wp:post_id>22</wp:post_id>
<wp:post_date>2008-08-22 16:43:59</wp:post_date>
<wp:post_date_gmt>2008-08-22 14:43:59</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>nhibernatetransactions</wp:post_name>
<wp:status>inherit</wp:status>
<wp:post_parent>21</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>attachment</wp:post_type>
<wp:postmeta>
<wp:meta_key>_wp_attached_file</wp:meta_key>
<wp:meta_value>/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/08/nhibernatetransactions.png</wp:meta_value>
</wp:postmeta>
<wp:postmeta>
<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
<wp:meta_value>a:5:{s:5:"width";i:778;s:6:"height";i:183;s:14:"hwstring_small";s:23:"height='30' width='128'";s:4:"file";s:105:"/kunden/homepages/9/d72533746/.oneclick/wordpress/1/__oneclick_uploads/2008/08/nhibernatetransactions.png";s:5:"thumb";s:36:"nhibernatetransactions.thumbnail.png";}</wp:meta_value>
</wp:postmeta>
	</item>
<item>
<title>Ambient transactions and NHibernate</title>
<link>http://bjro.de/2008/08/22/ambient-transactions-and-nhibernate/</link>
<pubDate>Fri, 22 Aug 2008 15:29:30 +0000</pubDate>
<dc:creator>BjRo</dc:creator>

		<category><![CDATA[Uncategorized]]></category>

<guid isPermaLink="false">http://bjro.de/2008/08/22/ambient-transactions-and-nhibernate/</guid>
<description></description>
<content:encoded><![CDATA[About two weeks ago we had some discussions in the german Alt.NET mailing list whether ambient transactions can be used in combination with NHibernate, especially regarding performance implications of such an approach.

Background of that discussion was that my colleague <a href="http://shishkin.org" target="_new">Sergey</a> and I wanted to implement the repository pattern based on Linq 2 NHibernate in a way that exposes NO NHibernate dependency to a surrounding layer. Besides that we didn't want to dublicate the UnitOfWork pattern that NHibernate implements internally. Because of that we decided to try out ambient transactions (System.Transactions) as our UnitOfWork.

Sergey has already posted about the design we're currently investigating, so I won't go into detail about that here. You can read more here:
<ul>
	<li><a href="http://sergeyshishkin.spaces.live.com/blog/cns!9F19E53BA9C1D63F!263.entry" target="_new">RepositoryPatter revised</a></li>
	<li><a href="http://sergeyshishkin.spaces.live.com/blog/cns!9F19E53BA9C1D63F!265.entry" target="_new">UnitOfWork Pattern revised</a></li>
	<li><a href="http://sergeyshishkin.spaces.live.com/blog/cns!9F19E53BA9C1D63F!264.entry" target="_new">Specifictaion Pattern revised</a></li>
</ul>
We started with a simple test comparison between the behavior of NHibernates native ITransactions and an NHibernate using TransactionScope for transactions.  What we noticed :

<strong>FlushMode.Commit doesn't work when using ambient Transactions</strong>

The following (xUnit) test fails:
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px">[<span style="color: #2b91af">Fact</span>]</p>
<p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">void</span> Session_should_be_clean_after_commited_transaction()</p>
<p style="margin: 0px">{</p>
<p style="margin: 0px">    <span style="color: blue">using</span> (<span style="color: blue">var</span> tx = <span style="color: blue">new</span> <span style="color: #2b91af">TransactionScope</span>())</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        SaveTwoPatients();</p>
<p style="margin: 0px">        tx.Complete();</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    Session.IsDirty().ShouldBeFalse();</p>
<p style="margin: 0px">}</p>
</td>
</tr>
</table>
But this can be easily fixed like this:
<table width="100%" bgcolor="#dfdfdf" border="0">
<tr>
<td>
<p style="margin: 0px">[<span style="color: #2b91af">Fact</span>]</p>
<p style="margin: 0px"><span style="color: blue">public</span> <span style="color: blue">void</span> Session_should_be_clean_after_commited_transaction_Fixed()</p>
<p style="margin: 0px">{</p>
<p style="margin: 0px">    <span style="color: blue">using</span> (<span style="color: blue">var</span> tx = <span style="color: blue">new</span> <span style="color: #2b91af">TransactionScope</span>())</p>
<p style="margin: 0px">    {</p>
<p style="margin: 0px">        <span style="color: #2b91af">Transaction</span>.Current.TransactionCompleted += (s, e) =&gt;</p>
<p style="margin: 0px">        {</p>

<p style="margin: 0px">            <span style="color: blue">if</span> (e.Transaction.TransactionInformation.Status
== <span style="color: #2b91af">TransactionStatus</span>.Committed)
</p><p style="margin: 0px">            {</p>
<p style="margin: 0px">                Session.Flush();</p>
<p style="margin: 0px">                Session.Clear();</p>
<p style="margin: 0px">            }</p>
<p style="margin: 0px">        };</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">        SaveTwoPatients();</p>
<p style="margin: 0px">        tx.Complete();</p>
<p style="margin: 0px">    }</p>
<p style="margin: 0px">&nbsp;</p>
<p style="margin: 0px">    Session.IsDirty().ShouldBeFalse();</p>
<p style="margin: 0px">}</p>
</td>
</tr>
</table>
<strong>For some reason ambient Transaction are FASTER than NHibernates native counter parts</strong>

We have also some tests  that perform a transactional insert a 1000 times. The duration of those tests are quite surprising. Have a look:

<a href="http://bjro.de/__oneclick_uploads/2008/08/nhibernatetransactions.png" title="NHibernateTransactions"><img src="http://bjro.de/__oneclick_uploads/2008/08/nhibernatetransactions.png" alt="NHibernateTransactions" /></a>

This has nothing to do with jitting in the CLR or the order how test are executed. I double checked the durations and ran each test on his own.  I didn't expect that gap, but I'm also not a NHibernate pro. Any thoughts?

I'll write more about our experiences with that approach soon. Our concept looks good on paper and our first impressions are not disproving either, so stay tuned . . .]]></content:encoded>
<wp:post_id>21</wp:post_id>
<wp:post_date>2008-08-22 17:29:30</wp:post_date>
<wp:post_date_gmt>2008-08-22 15:29:30</wp:post_date_gmt>
<wp:comment_status>open</wp:comment_status>
<wp:ping_status>open</wp:ping_status>
<wp:post_name>ambient-transactions-and-nhibernate</wp:post_name>
<wp:status>publish</wp:status>
<wp:post_parent>0</wp:post_parent>
<wp:menu_order>0</wp:menu_order>
<wp:post_type>post</wp:post_type>
<wp:comment>
<wp:comment_id>33</wp:comment_id>
<wp:comment_author>Sergey Shishkin</wp:comment_author>
<wp:comment_author_email>sergey.shishkin@hotmail.com</wp:comment_author_email>
<wp:comment_author_url>http://shishkin.org</wp:comment_author_url>
<wp:comment_author_IP>62.143.194.47</wp:comment_author_IP>
<wp:comment_date>2008-08-24 00:34:24</wp:comment_date>
<wp:comment_date_gmt>2008-08-23 22:34:24</wp:comment_date_gmt>
<wp:comment_content>Hi Björn, I had an interesting, though not so productive, discussion with Ayende on the alt.net mailing list regarding ambient transactions and UoW: http://tech.groups.yahoo.com/group/altdotnet/message/13584
There is a couple of good points to consider.</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
<wp:comment>
<wp:comment_id>34</wp:comment_id>
<wp:comment_author>BjRo</wp:comment_author>
<wp:comment_author_email>bjoern@bjro.de</wp:comment_author_email>
<wp:comment_author_url>http://www.bjro.de</wp:comment_author_url>
<wp:comment_author_IP>84.44.234.3</wp:comment_author_IP>
<wp:comment_date>2008-08-24 09:45:52</wp:comment_date>
<wp:comment_date_gmt>2008-08-24 07:45:52</wp:comment_date_gmt>
<wp:comment_content>Yeah, read it. Wasn't sure what to take from that discussion, however. "UoW may span several transactions" somehow reminds me of sagas. I think it's a different scope . . .</wp:comment_content>
<wp:comment_approved>1</wp:comment_approved>
<wp:comment_type></wp:comment_type>
<wp:comment_parent>0</wp:comment_parent>
</wp:comment>
	</item>
</channel>
</rss>
