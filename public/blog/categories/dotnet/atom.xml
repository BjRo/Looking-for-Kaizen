<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dotnet | Dude, where's my Kaizen?]]></title>
  <link href="http://www.bjoernrochel.de/blog/categories/dotnet/atom.xml" rel="self"/>
  <link href="http://www.bjoernrochel.de/"/>
  <updated>2011-11-15T19:45:21+01:00</updated>
  <id>http://www.bjoernrochel.de/</id>
  <author>
    <name><![CDATA[Björn Rochel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kata StringCalculator in F#]]></title>
    <link href="http://www.bjoernrochel.de/2010/05/12/kata-stringcalculator-in-f/"/>
    <updated>2010-05-12T19:36:38+02:00</updated>
    <id>http://www.bjoernrochel.de/2010/05/12/kata-stringcalculator-in-f</id>
    <content type="html"><![CDATA[<p>Yesterday's F# bookclub meeting in Munich was awesome as usual. It’s very interesting to see our overall understanding of functional programming progressing.
Slowly, but steady. Main topics we discussed on the last meeting were Currying and Tail Recursion. Finally "got that" (at least I think so ;-))</p>

<p>Two meetings ago we decided to do some coding on every meeting. The previous meeting we solved Kata FizzBuzz and on yesterday’s meeting we tried to dance with
<a href="http://osherove.com/tdd-kata-1/">Roy Osheroves StringCalculator</a>. We didn't make it completely to the end, but I think we solved most of the Kata.</p>

<!--more-->


<p>You can find yesterdays code at the end of this post. I'm sure in parts it smells a bit imperative and it definitely uses too much Regex - KungFu,
but overall I'm pleased with the result. We've tried to incorporate the feedback we got on the Kata FizzBuzz code. I would love to get feedback on this one as well.
What could be done better, cleaner or simply differently?</p>

<p>``` csharp Kata StringCalculator in F#
open System
open System.Text.RegularExpressions
open Xunit</p>

<p>let shouldBeEqualTo a b = Assert.Equal(a,b)</p>

<p>let parse value =</p>

<pre><code>if String.IsNullOrEmpty(value) then 0 else
match Int32.TryParse value with
| (false,_) -&gt; failwithf "Did not parse value %s" value  
| (true, n) when n &lt; 0 -&gt; failwithf "Negatives not allowed %s" value
| (true, n) when n &gt;= 1000 -&gt;0
| (true, n) -&gt; n
</code></pre>

<p>let splitIntoDelimitersAndRest (calculationString:String) =</p>

<pre><code>let defaultDelmiters = [",";"\n"]
let regex = new Regex("^//(?&lt;defaultDelimiter&gt;.*?)\\n(?&lt;rest&gt;.*)$", RegexOptions.Singleline)
match regex.Match calculationString with
| m when m.Success -&gt;
    let delimiters = List.Cons(m.Groups.["defaultDelimiter"].Value, defaultDelmiters)
    (delimiters, m.Groups.["rest"].Value)
| _ -&gt; (defaultDelmiters, calculationString)
</code></pre>

<p>let add (calculationString:String) =
   let splitResult = splitIntoDelimitersAndRest calculationString
   let delimiters = fst splitResult |> List.toArray
   let rest = snd splitResult
   rest.Split(delimiters, StringSplitOptions.RemoveEmptyEntries)
   |> List.ofSeq
   |> List.map parse
   |> List.sum</p>

<p>[<Fact>]
let <code>When an empty string is supplied it should return 0</code>() =</p>

<pre><code>String.Empty
|&gt; add
|&gt; (shouldBeEqualTo 0)
</code></pre>

<p>[<Fact>]
let <code>When a single digit is supplied it should return the digits value</code>() =</p>

<pre><code>["1"; "2"; "3"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [1;2;3]
</code></pre>

<p>[<Fact>]
let <code>When two digits are supplied separated by a comma it should be able to some them up</code>() =</p>

<pre><code>["1,2"; "3,4"; "4,5"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [3;7;9]
</code></pre>

<p>[<Fact>]
let <code>When more than two digits are supplied separated by a comma it should be able to sum them up</code>() =</p>

<pre><code>["1,2,4,5"; "3,4,5"; "4,5,6,7,8"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [12;12;30]
</code></pre>

<p>[<Fact>]
let <code>When more than two digits are supplied separated by new line character be able to to sum them up</code>() =</p>

<pre><code>["1\n2\n4\n5"; "3\n4\n5"; "4\n5\n6\n7\n8"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [12;12;30]
</code></pre>

<p>[<Fact>]
let <code>When more than two digits are supplied separated by new line character or comma it should be able to some them up</code>() =</p>

<pre><code>["1,2\n4,5"; "3,4\n5"; "4,5\n6\n7\n8"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [12;12;30]
</code></pre>

<p>[<Fact>]
let <code>When more than two digits are supplied separated by a user supplied default delimiter it should be able to sum them up</code>() =</p>

<pre><code>["//*\n1*2*4*5"; "//$\n3$4$5"; "//%\n4%5%6%7%8"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [12;12;30] 
</code></pre>

<p>[<Fact>]
let <code>When more than two digits are supplied separated by a user supplied default delimiter or one of the standard delimiters it should be able to sum them up</code>() =</p>

<pre><code>["//*\n1*2*4*5"; "//$\n3$4$5"; "//%\n4\n5%6%7%8"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [12;12;30]
</code></pre>

<p>[<Fact>]
let <code>When digits greater than 1000 are supplied it should ignore them</code>() =</p>

<pre><code>["//*\n1*2000*4*5"; "//$\n3$4$1000"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [10;7]
</code></pre>

<p>[<Fact>]
let <code>When using more than two digits with with a custom separator of multiple characters ít should be able to sum them up</code>() =</p>

<pre><code>["//asdf\n1asdf4asdf5"; "//as\n3as4as"]
|&gt; List.map add
|&gt; List.iter2 shouldBeEqualTo [10;7]
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kata FizzBuzz in F#]]></title>
    <link href="http://www.bjoernrochel.de/2010/04/29/kata-fizzbuzz-in-f/"/>
    <updated>2010-04-29T19:00:00+02:00</updated>
    <id>http://www.bjoernrochel.de/2010/04/29/kata-fizzbuzz-in-f</id>
    <content type="html"><![CDATA[<p>Last F# book club meeting in Munich was awesome (as usual). 2 weeks ago we decided to do a Code Kata on each subsequent meeting. This week was our first, with Kata FizzBuzz.</p>

<!--more-->


<p>This is what we came up with. (BTW: Partial function application and pipelining rocks !!!)</p>

<p>``` csharp Kata FizzBuzz in F#
open Xunit</p>

<p>let fizzBuzz number =</p>

<pre><code> match number with     
 | n when n%15=0 -&gt; "FizzBuzz"     
 | n when n%3=0 -&gt; "Fizz"    
 | n when n%5=0 -&gt; "Buzz"    
 | _ -&gt; number.ToString()  
</code></pre>

<p>let areEqual expected actual =</p>

<pre><code> Assert.Equal(expected, actual)  
</code></pre>

<p>[<Fact>]
let Should_return_the_digit_for_numbers_which_are_not_dividable_by_3_or_5()  =</p>

<pre><code>[1;2;11;13;16]     
|&gt; List.map fizzBuzz
|&gt; List.iter2 areEqual ["1";"2";"11";"13";"16"]  
</code></pre>

<p>[<Fact>]
let Should_return_Fizz_for_digits_dividable_by_3() =</p>

<pre><code>[3;6;9;12]     
|&gt; List.map fizzBuzz      
|&gt; List.iter (areEqual "Fizz")
</code></pre>

<p>[<Fact>]
let Should_return_Buzz_for_digits_dividable_by_5() =</p>

<pre><code>[5;10;20;25]     
|&gt; List.map fizzBuzz      
|&gt; List.iter (areEqual "Buzz")  
</code></pre>

<p>[<Fact>]
let Should_return_FizzBuzz_for_digits_dividable_by_3_and_5() =</p>

<pre><code>[15;30;45;60]     
|&gt; List.map fizzBuzz      
|&gt; List.iter (areEqual "FizzBuzz")  
</code></pre>

<p>```</p>

<p>If anyone of you hardcore functional guys out there notices something utterly wrong or something that could radically simplified, please let me know.
We’re eager to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing F# code with xUnit.net (on .NET 4.0)]]></title>
    <link href="http://www.bjoernrochel.de/2010/04/19/testing-f-code-with-xunit-net-on-net-4-0/"/>
    <updated>2010-04-19T08:48:46+02:00</updated>
    <id>http://www.bjoernrochel.de/2010/04/19/testing-f-code-with-xunit-net-on-net-4-0</id>
    <content type="html"><![CDATA[<p>A lot of my free time currently goes into learning F#.
While I had a great time playing around with the F# REPL FSI, I came to the conclusion that using FSI is not my
preferred way of a) learning the F# language and b) to develop code.
Writing unit tests simply for the purpose of learning and understanding of a language/component/system (aka &quot;Learning tests&quot;) seems to be a better fit,
at least for me. So, I sat down in order to see how I can use my beloved xUnit.net for this.
As it turns out it's not that difficult, but it's got some hurdles.</p>

<!--more-->


<h2>Possible runtime differences</h2>

<p>xUnit.net 1.5 is compiled against the .Net Framework 3.5. If you're using F# in combination with the VS2010 RC or
RTM (like I do) you've got at least to options to make them work together.</p>

<ul>
<li>Use multi-targeting and configure the F# projects to compile for the .NET 3.5 runtime  (<code>Properties/Application/Target Framework</code>).</li>
<li>Update the app.config files of xunit.console.exe and xunit.gui.exe with a startup section and specify the .NET framework 4.0 version as supported.</li>
</ul>


<p>``` xml Update the app config</p>

<pre><code> &lt;startup&gt;
    &lt;supportedRuntime version="v4.0.30128" safemode="true"/&gt; &lt;!-- VS2010 RC --&gt;
    &lt;supportedRuntime version="v4.0.30319" safemode="true"/&gt; &lt;!-- VS2010 RTM --&gt;
 &lt;/startup&gt;
</code></pre>

<p>```</p>

<h2>Pay attention to your parentheses</h2>

<p>My choice was to update the xUnit.net configurations. After the update of the configuration files my assembly was loaded,
however the test runner failed to detect my unit tests. As it turns out the open parentheses after a test function play an important role.</p>

<p>```csharp</p>

<pre><code> [&lt;Fact&gt;]
 let After_converting_a_valid_data_row_the_title_should_have_been_extracted = //This compiles, but the test doesn't show up in the test runner.
    let row = convertDataRow "Test, 1234"
    Assert.Equal(fst(row), "Test")

 [&lt;Fact&gt;]
 let After_converting_a_valid_data_row_the_title_should_have_been_extracted() = //This will work fine
    let row = convertDataRow "Test, 1234"
    Assert.Equal(fst(row), "Test")
</code></pre>

<p>```</p>

<p>My first reaction was: WTF? But after reading some more chapters of &quot;Real world functional programming&quot; and a discussion at our
local F# book club the behavior makes sense to me. My current understanding is that omitting the parentheses results in a different method signature.
You can easily spot this in FSI:</p>

<ul>
<li>The first one is <code>val After_converting_a_valid_data_row_the_title_should_have_been_extracted : unit</code></li>
<li>The second one results in a <code>val After_converting_a_valid_data_row_the_title_should_have_been_extracted : unit -&gt; unit</code></li>
</ul>


<p>What you can see here is that the first function signature doesn't have a parameter while the second has a parameter of the type <code>unit</code>.
One interesting difference between F# and C# is that the F# equivalent to C#'s <code>void</code> is an actual type called <code>unit</code>.
The fun part is that <code>()</code> is it's only value. Parentheses play a completely different role here ;-)</p>

<p>The xUnit test runner looks for methods with one unit parameter and a return type of unit.
That's why you need the parentheses.</p>

<h2>Testing exceptions with xUnit.Net</h2>

<p>One little subtlety I came across when testing exceptions is that you have to explicitly ignore the return value
when you're using Assert.Throws and pass in a method which doesn't return unit. Feels a bit strange at first, but explainable.
Again a signature mismatch. <code>Assert.Throws</code> expects a method with a <code>unit -&gt; unit</code> signature.
You have to do this in order to please the compiler. (If there's a better way for this, please let me know)</p>

<p>``` csharp</p>

<pre><code>[&lt;Fact&gt;]
let Trying_to_convert_an_invalid_format_throws() = 
    Assert.Throws(fun () -&gt; convertDataRow "FuBar" |&gt; ignore)
</code></pre>

<p>```</p>

<p>The ignore function simply throws away any value it receives, returns a unit and makes the F# compiler happy.</p>

<h2>Conclusion</h2>

<p>I hope you saw in this post that testing F# with xUnit.net is actually pretty easy.
It's also a wonderful case for language interop on top of the CLR. Go see it for yourself :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cutting the fluff from Service registration with StructureMap - revisited]]></title>
    <link href="http://www.bjoernrochel.de/2010/03/15/cutting-the-fluff-from-service-registration-with-structuremap-revisited/"/>
    <updated>2010-03-15T21:28:45+01:00</updated>
    <id>http://www.bjoernrochel.de/2010/03/15/cutting-the-fluff-from-service-registration-with-structuremap-revisited</id>
    <content type="html"><![CDATA[<p>This is just a quick update of an <a href="/2009/07/24/cutting-the-fluff-from-service-registration-or-how-to-do-funky-stuff-with-coc-castledynamicproxy-structuremap/">older post of mine</a>.
Since StructureMap's convention API has <a href="/2010/01/05/changes-in-structuremap-254/">changed quite a bit</a>,
here is the updated version of the code used in the post using the new APIs introduced in StructureMap 2.5.4.</p>

<!--more-->


<p>The new code is actually easier. It should look something like this . . . .</p>

<p>``` csharp Singleton registration convention</p>

<pre><code>public class ServicesAreSingletonsAndProxies : IRegistrationConvention
{
    #region IRegistrationConvention Members

    public void Process(Type type, Registry registry)
    {
        if (!type.IsConcrete() || !IsService(type) || !Constructor.HasConstructors(type))
        {
            return;
        }

        Type pluginType = FindPluginType(type);

        if (pluginType == null)
        {
            return;
        }

        registry
            .For(pluginType)
            .Singleton()
            .Use(new ConfiguredInstance(type)
            {
              Interceptor = new DynamicProxyInterceptor(pluginType)
            });
    }

    #endregion

    private static bool IsService(Type type)
    {
        return type.Name.EndsWith("Service");
    }

    private static Type FindPluginType(Type concreteType)
    {
        string interfaceName = "I" + concreteType.Name;

        return concreteType
            .GetInterfaces()
            .Where(t =&gt; string.Equals(t.Name, interfaceName, StringComparison.Ordinal))
            .FirstOrDefault();
    }
}
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Diving into the StoryTeller trunk, Part 11.3: Commands strike back]]></title>
    <link href="http://www.bjoernrochel.de/2010/02/15/diving-into-the-storyteller-trunk-part-11-3-commands-strike-back/"/>
    <updated>2010-02-15T20:21:20+01:00</updated>
    <id>http://www.bjoernrochel.de/2010/02/15/diving-into-the-storyteller-trunk-part-11-3-commands-strike-back</id>
    <content type="html"><![CDATA[<p>One of the things that can hit you really hard when writing blog posts about open source software (like StoryTeller is),
is the fact that your posts tend to get very fast outdated, especially when you don't pay that much attention to the detail (like I did, sigh).
If you're not aware of what I'm talking about, it's StoryTellers command story. I'm not sure when it changed but it definitely has changed and I
needed to update my last post <a href="/2010/01/09/diving-into-the-storyteller-trunk-part-11-2-more-on-commands/">11.2</a> quite a bit in order
to reflect the changes. Today I would like to conclude my trip through StoryTellers UI infrastructure with a look at how Commands are integrated
into the Screen Activation Lifecycle.</p>

<!--more-->


<p>Some of my older posts on the topic showed that the component responsible for Screen activation and deactivation in StoryTeller is the <code>ScreenConductor</code>.
However, when the <code>ScreenConductor</code> activates or deactivates a Screen, it delegates a major part of work to the so called <code>IShellService</code>.
The only implementer of this interface, the <code>ShellService</code>, is just a little facade around three things.</p>

<ol>
<li>The <code>ICommandbar</code>, which is the main toolbar of StoryTeller,</li>
<li>the <code>IOptionsMenu</code>, which is a kind of Shortcut menu for StoryTellers Commands and</li>
<li>the <code>IScreenObjectRegistry</code>, which acts as a store  / front-end for the current Command registration.</li>
</ol>


<p>``` csharp The ShellService</p>

<pre><code>public class ShellService : IShellService
{
    private readonly ICommandBar _Commands;
    private readonly IOptionsMenu _options;
    private readonly IScreenObjectRegistry _registry;

    public ShellService(
          IScreenObjectRegistry registry, 
          ICommandBar Commands, 
          IOptionsMenu options)
    {
        _registry = registry;
        _Commands = Commands;
        _options = options;
    }

    #region IShellService Members

    public void ActivateScreen(IScreen screen)
    {
        _registry.ClearTransient();
        screen.Activate(_registry);
        refill();
    }

    public void ClearTransient()
    {
        _registry.ClearTransient();
        refill();
    }

    public void Start()
    {
        refill();
    }

    #endregion

    private void refill()
    {
        _Commands.Refill(_registry.Actions);
        _options.Refill(_registry.Actions);
    }
</code></pre>

<p>```</p>

<p>You can see some interesting aspects in the short code above.</p>

<ol>
<li>The word transient appears several times. StoryTeller differentiates between two types of Commands:
Permanent Commands and transient Commands. Permanent Commands are displayed, well permanently, while transient Commands are
what I depicted as contextual Commands. They are Commands which should be only visible in a particular context.</li>
<li>Contextualization of Commands is handled on a per Screen basis in StoryTeller. Every time a Screen gets activated or
deactivated the <code>ICommandBar</code> and the <code>IOptionsMenu</code> get reset and completely rebuild. With this you can have a very different Command UI
depending on which Screen is activated.</li>
<li>The actual Command configuration in the Screen Activation Lifecycle is completely delegated to the active Screen. In his <code>Activate()</code> method he
receives a reference to the <code>IScreenObjectRegistry</code> which can be used in order to start the Command configuration via a small fluent API.</li>
</ol>


<p>``` csharp IScreenObjectRegistry</p>

<pre><code>public interface IScreenObjectRegistry
{
    //Gets a collection of all currently known command configurations  
    IEnumerable&lt;ScreenAction&gt; Actions { get; }

    //Removes all transient command configurations from the registry
    void ClearTransient();

    //DSL starting point for the configuration of transient Commands
    IActionExpression Action(string name);

    //DSL starting point for the configuration of permanent Commands
    IActionExpression PermanentAction(string name);
}
</code></pre>

<p>```</p>

<p>The following code snippet shows an example of how this API could be leveraged inside a Screen.</p>

<p>``` csharp Inside a screen</p>

<pre><code>    public void Activate(IScreenObjectRegistry screenObjects)
    {
        screenObjects
            .Action("Save")
            .Bind(ModifierKeys.Control, Key.S)
             .To(_save); //This can be either Systen.Action or an System.Windows.Input.ICommand

        screenObjects
            .Action("Cancel")
            .Bind(Key.Escape)
            .To(_cancel);
    }
</code></pre>

<p>```</p>

<p>Gabriel Schenker has <a href="http://www.lostechies.com/blogs/gabrielschenker/archive/2010/01/08/fluent-silverlight-table-of-content.aspx">written an excellent series on how to write such a fluent API</a>.
Although it's targeting Silverlight, most of the involved problems are explained in detail there, so forgive me if I don't dive into the actual DSL implementation.</p>

<h2>Some final thoughts</h2>

<p>Making the Screen responsible for setting up his Commands makes a lot of sense to me, since the Screen is the unit which gets plugged into the UI infrastructure
and it also very likely plays the role of the Command receiver in terms of the classic GoF pattern description.
This doesn't necessary mean that Screens are the only place for Command configuration.
The initialization of modules in a Composite application is also a very likely place for registration of permanent Commands.</p>

<p>I consider having a fluent API for configuring the Commands also a plus, because it IMHO makes the actual Command configuration a lot easier and accessible.
I've used the same setup (fluent API + delegation to screen) on my last 3 projects and it always worked for me like a charm.</p>

<p>Like I mentioned in the previous post, what I don't like that much is the idea of mixing in visual aspects (Icon, Size, Location) into the Command configuration,
mostly because I've been burned by this in the past when facing complex menus, like the ribbon.
I think it's a good idea to externalize the visual aspect via XML, at least for all the static stuff.</p>

<h2>This is it</h2>

<p>This was the last post about StoryTeller (at least for a while). It has been an interesting voyage which taught me a lot about UI infrastructure design,
StructureMap usage and Convention over Configuration. Although it was primarily my learning excercise I hope you took something interesting with you
from this blog series, too.</p>

<p>I'm going to continue my research on UI architecture with another deep dive into <a href="http://devlicio.us/blogs/rob_eisenberg/default.aspx">Rob Eisenbergs</a> <a href="http://www.codeplex.com/caliburn">Caliburn</a> soon.
If your interested I would be very happy to have you with me on that trip . . .</p>
]]></content>
  </entry>
  
</feed>
