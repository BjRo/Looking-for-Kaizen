<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sw-design | Dude, where's my Kaizen?]]></title>
  <link href="http://www.bjoernrochel.de/blog/categories/sw-design/atom.xml" rel="self"/>
  <link href="http://www.bjoernrochel.de/"/>
  <updated>2011-11-15T15:56:30+01:00</updated>
  <id>http://www.bjoernrochel.de/</id>
  <author>
    <name><![CDATA[Björn Rochel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Plain Old CLR / C# Object]]></title>
    <link href="http://www.bjoernrochel.de/2010/02/25/plain-old-clr-c-object/"/>
    <updated>2010-02-25T20:51:37+01:00</updated>
    <id>http://www.bjoernrochel.de/2010/02/25/plain-old-clr-c-object</id>
    <content type="html"><![CDATA[<p>Crap, time can go by so fast. On Monday a <a href="http://twitter.com/ralfw/status/9446904971">tweet</a> by <strong>Ralf Westphal</strong> caught
my attention and I felt the need to comment. It started as a series of Twitter replies, but to be honest Twitter isn’t suited or made for those kind of discussions.
So I started to write this post in order to explain why I disagree with Ralf (or at least don’t get the intended message of his tweet).
Yeah a short look into the calendar indicates that I’m a little late, but I thought better late than ditch the post and forget about it.</p>

<h2>What got me baffled</h2>

<p>In his tweet he basically states (my translation from German to English) that</p>

<p><blockquote><p>If a domain model consists only of POCOs it should be called data model</p><footer><strong>Ralf Westphal</strong><cite><a href='http://twitter.com/ralfw/status/9446904971'>twitter.com/ralfw/status/&hellip;</a></cite></footer></blockquote></p>

<p>My first thought was a) does he mean anemic domain models and b) what has POCO to do with that? As I found out he didn’t mean
<a href="http://twitter.com/ralfw/status/9493173442">anemic domain models</a>. So let’s take a look at the POCO aspect.</p>

<!--more-->


<h2>POCO / POJO / PONO / POwhatever</h2>

<p>The term exists in several variations and different programming languages. For the sake of simplicity I’m going to use POCO for the rest of the post since
I’m a .NET guy, but same applies of course to all other versions.
The English <a href="http://en.wikipedia.org/wiki/Plain_Old_CLR_Object">Wikipedia site</a> defines the term “Plain Old CLR Object” as the
following: <br/>
<blockquote><p>The term is used to contrast a simple object with one that is designed to be used with a complicated, special object frameworks such as an ORM component.<br/>Another way to put it is that POCO's are objects unencumbered with inheritance or attributes needed for specific frameworks …<br/></p><footer><strong>Wikipedia</strong><cite><a href='http://en.wikipedia.org/wiki/Plain_Old_CLR_Object'>en.wikipedia.org/wiki/&hellip;</a></cite></footer></blockquote></p>

<p>To me personally, POCO is just a simple, but very important principle or guideline. POCO for me means,
that you should strive to limit the contact area of your own code and the code of third party frameworks as much as possible.
This includes staying away from third-party frameworks with heavy attribute usage and / or inheritance requirements.
Why should you do this? 2 reasons seem to be important to me:</p>

<ul>
<li><strong>Orthogonality</strong>. Two parts of a system, like features, components, classes, whatever are called orthogonal when changes in one don’t affect the other.
Following a POCO approach in a solution can greatly support orthogonality in my personal experience. It helps you to design and build solutions that are easy to change and very adaptable to new requirements or frameworks
(Ever tried to migrate a Microsoft CAB based solution?). Which leads to the second IMHO very important aspect:</li>
<li><strong>Reversibility</strong>. In the end of the day we’re all human. Sometimes we design the wrong way, sometimes the framework doesn’t work as expected,
sometimes a particular framework isn’t exactly the right one any more when requirements change drastically.
All those things happen. All those things can can come up in any project. POCO can help a lot in those situations,
because it limits the impact of external frameworks or components to your code.</li>
</ul>


<p>POCO mostly comes up in the context of an ORM solution. However, the concept of POCO is not directly bound to persistence or even domain models.
Which leads me back to the entry of the post and Ralfs tweet. What is the main distinction between a domain model and something we might call a data model?
In my opinion this is BEHAVIOR. The term POCO itself has nothing to do with behavior itself (at least from my perspective).
Totally different aspects IMHO. So why should a model consisting of POCOs be called data model?</p>

<p>Am I fighting on lost ground here, missing something or confusing something?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notifications the WPF way (I guess), Part III]]></title>
    <link href="http://www.bjoernrochel.de/2009/11/02/notifications-the-wpf-way-i-guess-part-iii/"/>
    <updated>2009-11-02T19:59:00+01:00</updated>
    <id>http://www.bjoernrochel.de/2009/11/02/notifications-the-wpf-way-i-guess-part-iii</id>
    <content type="html"><![CDATA[<p>Today I would like to conclude my little series about the Notification
Pattern with (I guess at least for some of you) the most interesting
part:</p>

<h2>Today is all about displaying Notifications in the UI</h2>

<p>This post will guide you through all the steps I took in order to achieve the
affect I demonstrated in the <a href="/2009/10/20/notifications-the-wpf-way-i-guess-part-i/">introduction post</a>.
Last time I showed how I'm transfering <code>Notifications</code> from the <code>ViewModel</code>
into the logical WPF tree. If you've not read the previous posts, please
give them some minutes, because I'm not going to repeat a lot of them
today. You can find them
<a href="/2009/08/28/implementing-the-notification-pattern-using-dataannotation-validators/">here</a>,
<a href="/2009/10/20/notifications-the-wpf-way-i-guess-part-i/">here</a>
and
<a href="/2009/10/27/notifications-the-wpf-way-i-guess-part-ii/">here</a>.
As always, a quick reminder:</p>

<blockquote><p>What I'm showing is in this series is <strong>how I've implemented the Notification Pattern</strong>. I'm not claiming that
it's the only or the best way to do so. However, it's the one that works
very good for me.</p></blockquote>

<h3>How to get the red border effect</h3>

<p>The red border has to be displayed when Notifications exists for a control. Technically
this means that the attached property <code>Notifications</code> (which is defined
on the <code>ValidationBehavior</code> class I showed in the last post) is set to a
non empty <code>NotificationCollection</code>. We can react to this by defining a
<code>DataTrigger</code> for this. In my own words I would describe a <code>DataTrigger</code> as</p>

<blockquote><p>An in XAML defined event handler with a related criteria. When the
criteria is matched the DataTrigger gets executed. When it isn't matched
any more, the DataTrigger reverts the state of the element on which it's
defined to the state before it was executed.</p></blockquote>

<p>Sounds usable for our purpose. Think about it, we only want to show the red border, when the
attached property is set to a non empty collection. If the property is
reset the border needs to disappear. The only difficulty with
<code>DataTriggers</code> we need to solve on our way is how to configure that
exactly in XAML. <code>DataTriggers</code> can be easily set on primitives (such as
string, bool, etc.) or null, but there isn't an out of the box way for
setting our criteria in XAML. However you can use a custom Converter for
converting our value to a primitive "switch".</p>

<p>``` csharp An IValueConverter for our DataTrigger
[ValueConversion(typeof(NotificationCollection), typeof(bool))]
public class ContainsNotificationConverter : IValueConverter
{
  public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
  {</p>

<pre><code>return (value != null &amp;&amp; value is NotificationCollection &amp;&amp; ((NotificationCollection)value).Any()); 
</code></pre>

<p>  }</p>

<p>  public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
  {</p>

<pre><code>throw new NotSupportedException(); 
</code></pre>

<p>  }
}
```</p>

<p>Using this converter we can define our DataTrigger in the Style for Controls like this:</p>

<p>``` xml Wiring it up via XAML DataTriggers
&lt;Fx:ContainsNotificationConverter x:Key="notificationConverter" /></p>



<p>```</p>

<h2>How to display Notifications in a Tooltip</h2>

<p>Solving the Tooltip requirement was a bit more tricky (at least for me).
It took me quite some time to figure out how to do this in WPF. The
solution I'm going to show uses only XAML based code.</p>

<h3>1. Integrating the Tooltip into the DataTrigger</h3>

<p>We simply use our <code>DataTrigger</code> to automatically set the tooltip of a
<code>Control</code> in case <code>Notifications</code> exist.</p>

<p>``` xml Adding the tooltip
<ToolTip x:Key="ValidationErrorTooltip" /></p>



<p>```</p>

<p>Now the UI looks really crappy. The tooltip is not recognizable as one.</p>

<p><img src="/images/posts/signup_emptytooltip1.jpg" alt="Horrible Tooltip" /></p>

<h3>2. Using a ControlTemplate to style the Tooltip</h3>

<p>In order to shape the appearance of the tooltip we can use XAML Styles again.
You can change the whole visual appearance of a Control using Styles and
<code>ControlTemplates</code>. The template I defined consists mostly of a <code>DockPanel</code>
containing a <code>Label</code> (which provides the tooltips caption) and a <code>TextBlock</code>
(which will later contain the Notification messages).</p>

<p>``` xml Adding ControlTemplates to the mix</p>





<!-- Notice the defined Style -->


<p><ToolTip x:Key="ValidationErrorTooltip" Style="{StaticResource ErrorTooltipSyle}" /></p>



<p>```</p>

<p>Our UI now looks like this.</p>

<p><img src="/images/posts/signup_tooltipwithcontroltemplate1.jpg" alt="Tooltip with ItemSource" /></p>

<p>Not as crappy as before but we're not finished yet, because we're not
displaying <code>Notifications</code> yet.</p>

<h3>3. Define Databinding on the Tooltip</h3>

<p>Defining the Databinding was probably the hardest step I had to take.
The problem is that you need to get the <code>NotificationCollection</code> from the
<code>Control</code> the tooltip is displayed on. Being not a WPF pro figuring out
how to do this took quite some time. Anyway, in order to get the
<code>Notification</code> there isn't much you need to do. The trick is to bind
against the property <code>PlacementTarget</code> on the <code>ToolTip</code> class itself. This
property holds the reference to the <code>Control</code> on which the <code>Tooltip</code> instance is
displayed. All we need to do is to add a <code>Binding</code> to the <code>Style</code> definition
that sets the <code>DataContext</code> of the <code>ToolTip</code> to the related control.</p>

<p>``` xml Binding the PlacementTarget to display the tooltip</p>



<p>```</p>

<p>The next step we need to take is setting up the Binding
for our attached property <code>Notifications</code>. Because a
<code>NotificationCollection</code> can contain more than one <code>Notification</code> I used the
<code>ItemsControl</code> for displaying them in the content area of the tooltip.</p>

<p>``` xml Displaying the Notifications</p>



<p>```</p>

<p>Voila, our <code>Notifications</code> are finally displayed in the UI.</p>

<p><img src="/images/posts/signup_tooltipwithcontroltemplate2.jpg" alt="Tooltip with ControlTemplate" /></p>

<h3>4. Styling the Notifications</h3>

<p>In my initial post I showed a hyphen in front of each Notification. This
is fairly easy to add, too. All you have to do is to define a
<code>DataTemplate</code> for the <code>Notification</code> class and set it as the <code>ItemTemplate</code>
of the <code>ItemsControl</code> we're using.</p>

<p>``` xml Styling the notifications</p>

<!-- Very simple data template -->


<p><DataTemplate x:Key="NotificationTemplate"></p>

<pre><code>&lt;StackPanel Orientation="Horizontal"&gt;
    &lt;TextBlock&gt;-&lt;/TextBlock&gt;
    &lt;TextBlock x:Name="notification" Text="{Binding}" /&gt;
&lt;/StackPanel&gt;
</code></pre>

<p></DataTemplate></p>



<p>```</p>

<p><code>DataTemplates</code> are also the weapon of choice if you want to
display errors in a different fashion than warnings (for instance by
displaying a different icon). This is where we arrived:</p>

<p><img src="/images/posts/signup_tooltipfinishedjpg.jpg" alt="Tooltip finished" /></p>

<h2>Closing thoughts</h2>

<p>What I like about the current solution is that it demonstrates in a nice
way how different the programming model of WPF actually is compared to
WinForms. The only imperative code we have is the code that transfers
<code>Notifications</code> from our <code>ViewModel</code> into the logical tree. That's it. The
rest, the complete visual appeal of the Notifications, is a separated
concern. Those two things can be changed independently from each other,
even by different roles in a development team (Designer/Developer).
Besides that I like the way the composition based WPF model helps my
application code to stay focused and clean with only minimum
implementation constraints on the ViewModel itself (the
INotificationSource interface). There're certainly things to improve
both in XAML and in the glue code but I consider it a good start to
build on ...</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notifications the WPF way (I guess), Part II]]></title>
    <link href="http://www.bjoernrochel.de/2009/10/27/notifications-the-wpf-way-i-guess-part-ii/"/>
    <updated>2009-10-27T21:29:16+01:00</updated>
    <id>http://www.bjoernrochel.de/2009/10/27/notifications-the-wpf-way-i-guess-part-ii</id>
    <content type="html"><![CDATA[<p>Back again to my take on the Notification pattern with WPF. Last time I
talked briefly about my motivation for this little series. This time we
dive more into the nuts and bolts of my example implementation.</p>

<h2>How the ViewModel notifies the UI</h2>

<p>I defined an interface called <code>INotificationSource</code> for this. This
interface defines only I member which exposes a <code>NotificationCollection</code>.
<code>NotificationCollection</code> is just a standard <code>ObservableCollection&lt;Notification&gt;</code> with some additional bits in it
(such as retrieving a collection of <code>Notifications</code> for a given source).
By deriving from <code>ObservableCollection</code> you get the <code>CollectionChangedEvent</code>
on the collection for free.</p>

<p>``` csharp The interface that needs to be implemented by a ViewModel
public interface INotificationSource
{</p>

<pre><code>NotificationCollection Notifications {get;}
</code></pre>

<p>}
```</p>

<p>In my current app I've got a <code>Layer Supertype</code> for
ViewModels which implements this interface.</p>

<h2>Glue code for transferring Notifications from the ViewModel into the logical tree</h2>

<p>As I mentioned in the last post I'm using the <code>Attached Behavior Pattern</code>
for transferring Notifications from the ViewModel to the related
elements in the logical tree (When I say related I'm referring to the
<code>FrameworkElements</code> bound to my ViewModel via DataBinding). The class
responsible for the transfer is a <code>DependencyObject</code> derived class, called
<code>ValidationBehavior</code>. This class defines two attached
<code>DependencyProperties</code>, <code>IsEnabled</code> and <code>Notifications</code>.</p>

<p>``` csharp Our attached validation behavior
 public class ValidationBehavior : DependencyObject
 {</p>

<pre><code> public static readonly DependencyProperty IsEnabledProperty;
 public static readonly DependencyProperty NotificationsProperty;

 static ValidationBehavior()
 {
     IsEnabledProperty =  DependencyProperty.RegisterAttached(
                             "IsEnabled",
                             typeof(bool),
                             typeof(ValidationBehavior),
                             new FrameworkPropertyMetadata(OnValidationBehaviorEnabled));

     NotificationsProperty = DependencyProperty.RegisterAttached(
                             "Notifications",
                             typeof(NotificationCollection),
                             typeof(ValidationBehavior),
                             new PropertyMetadata(null));
 }

 public static bool GetIsEnabled(DependencyObject host)
 {
     return (bool) host.GetValue(IsEnabledProperty);
 }

 public static void SetIsEnabled(DependencyObject host, bool isEnabled)
 {
     host.SetValue(IsEnabledProperty, isEnabled);
 }

 public static NotificationCollection GetNotifications(DependencyObject host)
 {
     return (NotificationCollection)host.GetValue(NotificationsProperty);
 }

 public static void SetNotifications(DependencyObject host, NotificationCollection notification)
 {
     host.SetValue(NotificationsProperty, notification);
 }
</code></pre>

<p>}
```</p>

<p>The attached DependencyProperty <code>IsEnabled</code> is used to attach our
behavior to the target element marked with the property. Notice the
<code>OnValidationBehaviorEnabled</code> handler which is called when the value of
the registered attached DependencyProperty has changed. The attached
DependencyProperty <code>Notifications</code> will later hold the collection of
Notifications extracted from the ViewModel by our attached behavior. By
having the <code>NotificationCollection</code> as an attached property you're able to
bind against it from XAML (as we'll see in the following post). If you
recall the last post about this topic, maybe you remember that I didn't
actually set the attached property <code>IsEnabled</code> in the ViewModels XAML
file. You could configure the behavior in the related XAML file but I
didn't want to do this for all my ViewModels. Because of this I decided
to use Styles for this.</p>

<p>``` xml XAML styles to wire it up</p>

<!-- The global application class -->


<p>&lt;Application x:Class="Notifications.App"</p>

<pre><code>xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
&lt;Application.Resources&gt;
    &lt;ResourceDictionary Source="Resources/Theme.xaml" /&gt;
&lt;/Application.Resources&gt;
</code></pre>

<p></Application></p>

<!-- My XAML file containing the resources -->


<p>&lt;ResourceDictionary</p>

<pre><code>xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:Fx="clr-namespace:Notifications.Fx"&gt;

&lt;Style TargetType="Control"&gt;
    &lt;Setter Property="Fx:ValidationBehavior.IsEnabled" Value="true" /&gt;
&lt;/Style&gt;

&lt;Style TargetType="TextBox" BasedOn="{StaticResource {x:Type Control}}" /&gt;
</code></pre>

<p></ResourceDictionary>
```</p>

<p>When the Style is applied the <code>IsEnabled</code> attached property
will be automatically set on all elements based on that style and this
brings us into the position to hook into the elements events and access
the elements data. The <code>OnValidationBehaviorEnabled</code> handler is actually
straight forward.</p>

<p>``` csharp Attach to the target FrameworkElement
private static void OnValidationBehaviorEnabled(</p>

<pre><code>DependencyObject dependencyObject,
DependencyPropertyChangedEventArgs args)
</code></pre>

<p>{</p>

<pre><code>var frameworkElement = (FrameworkElement)dependencyObject;

// Get the DataContext from the element. Mostly this DataContext is not directly
// set on the element but rather derived from the parents DataContext
var notificationSource = frameworkElement.DataContext as INotificationSource;

if (notificationSource == null)
{
    return;
}

// Clear related Notifications of an element when the element
// got the focus.
frameworkElement.GotFocus += ClearNotificationOnFocus;

// Hook into the CollectionChanged event of the NotificationCollection.
// I'm using a closure here in order to capture the FrameworkElement.
notificationSource.Notifications.CollectionChanged += (sender, collectionChangedArgs) =&gt;
{
    var notifications = GetNotifications(notificationSource, frameworkElement);

    SetNotification(
        frameworkElement,
        notifications);
};
</code></pre>

<p>}
```</p>

<p>The anonymous event handler registered for the <code>CollectionChangedEvent</code> tries to get the
collection of Notifications for the <code>FrameworkElement</code>.</p>

<p>``` csharp Extracting the notifications for a particular element
private static NotificationCollection GetNotifications(INotificationSource notificationSource, FrameworkElement frameworkElement)
{</p>

<pre><code>return notificationSource.Notifications.AllNotificationsFor(frameworkElement.Name);
</code></pre>

<p>}
```</p>

<p>As you can see this particular piece of code has a
little quirk right now. It relies on the convention / assumption that
the property on the <code>ViewModel</code> and the bound <code>FrameworkElement</code> share the
same name. It was the easiest thing to do. It would also be easy to
introduce another attached property for this in order to specify the
name of the related ViewModel property. However this wouldn't be 100%
DRY because you're most likely going to specify the property via the
Binding <code>MarkupExtension</code>, too. I'm open to suggestions of how this
correlation can be done better. The last missing code piece is the
handler which clears the Notification when it gets focus. It simply sets
the attached Notification property to null.</p>

<p>``` csharp Resetting a notification on focus
private static void ClearNotificationOnFocus(object sender, RoutedEventArgs e)
{</p>

<pre><code>var elementWithNotification = (FrameworkElement)e.OriginalSource;
elementWithNotification.SetValue(NotificationProperty, null);
</code></pre>

<p>}
```</p>

<h2>Closing thoughts</h2>

<p>I hope you're getting a feeling for what I wanted to show with this
little post series. Today I talked mostly about how <code>Notifications</code> can be
transfered from the <code>ViewModel</code> into the <code>WPF tree</code>. While the code
currently has some pieces in it that imho should be refactored
(correlation of the <code>Notifications</code>, <code>CollectionChangedEvent</code> currently
reloads all Notifications), I hope you saw in this post that it's
relatively easy to add such an ability to your app infrastructure
without a) having a base class constraint b) a lot of imperative code
and c) doing a lot of configuration. The next post will conclude this
little series mostly with <code>XAML</code> stuff. We're going to cover how to
combine the different tools (<code>DataTrigger</code>, <code>DataTemplates</code>,
<code>ControlTemplates</code>, <code>Converter</code>) that WPF offers in order to fire up a
Tooltip containing all Notifications for an element.</p>

<p>CU next time . . .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notifications the WPF way (I guess), Part I]]></title>
    <link href="http://www.bjoernrochel.de/2009/10/20/notifications-the-wpf-way-i-guess-part-i/"/>
    <updated>2009-10-20T21:38:09+02:00</updated>
    <id>http://www.bjoernrochel.de/2009/10/20/notifications-the-wpf-way-i-guess-part-i</id>
    <content type="html"><![CDATA[<p><strong>Update 2.11.2009: I removed the DependencyObject and
DependencyProperty references from the ViewModel. The solution works
fine without them.</strong></p>

<p>This is the start of a small mini series about how I would currently
approach the <code>Notification Pattern</code> in a WPF application, using the
default WPF practices and patterns. Think about it as a step by step
guide for using <code>DataBinding</code>, <code>Control-Templates</code>, <code>Styles</code>,
<code>Resource-Inheritance</code>, <code>Converters</code> and the <code>Attached-Behavior-Pattern</code> for
displaying Notifications in the WPF-UI. (I guess most of this is also
doable in Silverlight too, but I've never done anything with SL so I
can't say for sure). I've also prepared a little bit of sample code for
this topic which will be downloadable soon.</p>

<h2>First, some cautious warnings </h2>

<p>I'm by no means a WPF-expert. I'm still in the learning
phase. So, if there are more obvious or intuitive solutions to the
problem, or I'm plain wrong about this, feel free to comment. I'm sure
there is A LOT room for improvement.</p>

<h2>What I've left out intentionally </h2>

<p>I tried to strip everything unnecessary for the scope of
the post from the code. This includes for instance <code>IoC</code>, <code>Convention over
Configuration</code>, <code>Code-Contracts</code>, <code>Expression-based Databinding setup</code> and
some base class or extension refactorings. Don't get me wrong, I
absolutely value those elements, but I wanted the example to be as easy
as possible while being somewhat useful for a 'real world' application.
The code might look a bit raw at at some edges because of this. So
please keep that in mind before throwing with stones ;-)</p>

<h2>Some other prerequesites </h2>

<p>A while back I wrote a post about <a href="/2009/08/28/implementing-the-notification-pattern-using-dataannotation-validators/">implementing the Notification-pattern using
System.Componentmodel.DataAnnotations</a>.
It demonstrates the implementation of a generic validator based on the <code>DataAnnotation</code> attributes. Besides that,
<a href="/2009/08/19/the-attached-behavior-pattern/">this</a>
post about the <code>Attached-Behavior-Pattern</code> will also be useful for this
mini-series. Please give them a short visit if you haven't read them
yet.</p>

<h2>The example scenario </h2>

<p>The scenario I'm going to use for the
example is a very simple sign up form. It contains two input fields for
username / email and a 'sign-up' button. It looks like this.</p>

<p><img src="/images/posts/signup.bmp" alt="image" /></p>

<p>Rules associated with the fields are:</p>

<ol>
<li>Username is required and must at least be 5 characters long.</li>
<li>Email is required and must contain a valid email address.</li>
</ol>


<p>If any of the rules is broken, the related element should be visually highlighted . . .</p>

<p><img src="/images/posts/signupadorner.bmp" alt="image" /></p>

<p>. . . and when you hover over the element you'll get a detailed description of the error from a tooltip.</p>

<p><img src="/images/posts/signuptooltip.bmp" alt="image" /></p>

<p>I'm using the <code>PresentationModel / MVVM</code> pattern for the UI since it seems to be the default UI pattern in WPF.</p>

<p>``` xml This is how I would like my SignUpView to be
&lt;Window x:Class="Notifications.SignUpView"</p>

<pre><code>xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;
&lt;Grid&gt;
    &lt;Grid.RowDefinitions&gt;
        &lt;RowDefinition Height="*"/&gt;
    &lt;/Grid.RowDefinitions&gt;
    &lt;Grid.ColumnDefinitions&gt;
        &lt;ColumnDefinition Width="*"/&gt;
    &lt;/Grid.ColumnDefinitions&gt;
    &lt;GroupBox
        Grid.Column="1"
        Grid.Row="1"
        Header="Sign up"
        BorderThickness="2"
        VerticalAlignment="Center"
        HorizontalAlignment="Center"
        MaxWidth="300"
        MaxHeight="600"&gt;
        &lt;Grid&gt;
            &lt;Grid.RowDefinitions&gt;
                &lt;RowDefinition /&gt;
                &lt;RowDefinition /&gt;
            &lt;/Grid.RowDefinitions&gt;
            &lt;Grid.ColumnDefinitions&gt;
                &lt;ColumnDefinition Width="Auto"/&gt;
                &lt;ColumnDefinition Width="Auto"/&gt;
                &lt;ColumnDefinition Width="*"/&gt;
            &lt;/Grid.ColumnDefinitions&gt;
            &lt;Label
                Content="Username:"
                VerticalAlignment="Bottom"
                Margin="10,0,10,0"
                Grid.Row="0"
                Grid.Column="0" /&gt;
            &lt;Label
                Content="Email:"
                VerticalAlignment="Bottom"
                Margin="0,0,10,0"
                Grid.Row="0"
                Grid.Column="1" /&gt;
            &lt;TextBox
                Name="Username"
                MinWidth="100"
                MaxHeight="30"
                Margin="10,0,10,10"
                Grid.Row="1"
                Grid.Column="0"
                TabIndex="0"
                Text="{Binding Path=Username, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}" /&gt;
            &lt;TextBox
                Name="Email"
                MinWidth="100"
                MaxHeight="30"
                Margin="0,0,10,10"
                Grid.Row="1"
                Grid.Column="1"
                Text="{Binding Path=Email, Mode=OneWayToSource, UpdateSourceTrigger=PropertyChanged}"
                TabIndex="1" /&gt;
            &lt;Button
                MaxHeight="30"
                Grid.Row="1"
                Margin="0,0,10,10"
                Grid.Column="2"
                Content="Sign up!"
                TabIndex="3"
                Command="{Binding Path=SignUpCommand, Mode=OneWay}" /&gt;
        &lt;/Grid&gt;
    &lt;/GroupBox&gt;
&lt;/Grid&gt;
</code></pre>

<p></Window>
```</p>

<p>``` csharp This is how I would like my SignUpViewModel to be</p>

<pre><code>public class SignUpViewModel : INotificationSource
{
    private readonly NotificationCollection _notifications;
    private readonly DelegateCommand _signUpCommand;
    private readonly ISignUpService _signUpService;
    private readonly IValidator&lt;SignUpViewModel&gt; _validator;

    #region Constructors

    public SignUpViewModel(IValidator&lt;SignUpViewModel&gt; validator, ISignUpService signUpService)
    {
        _validator = validator;
        _signUpService = signUpService;
        _notifications = new NotificationCollection();
        _signUpCommand = new DelegateCommand(TrySignUp);
    }

    #endregion

    #region Properties

    [Required(ErrorMessage = "Field 'Username' is missing")]
    [MinimumStringLength(5)]
    public string Username
    {
        get;
        set;
    }

    [Required(ErrorMessage = "Field 'Email' is missing")]
    [MinimumStringLength(5)]
    public string Email
    {
        get;
        set;
    }

    public ICommand SignUpCommand
    {
        get { return _signUpCommand; }
    }

    public NotificationCollection Notifications
    {
        get { return _notifications; }
    }

    #endregion

    #region Private methods

    private void TrySignUp()
    {
        if (!IsValid())
        {
            return;
        }

        _signUpService.TrySignUp(Username, Email);
    }

    private bool IsValid()
    {
        Notifications.Clear();

        _validator.Validate(this, Notifications);

        return Notifications.ContainsErrors;
    }

    #endregion
}
</code></pre>

<p>```</p>

<h2>Did you notice it? </h2>

<p>There is NO CODE in the View (Xaml and code behind) or the
ViewModel which displays the Notifications.There's also no base class
for View or ViewModel where the code might be. What's there on the other
hand is only a collection of Notifications hanging of the ViewModel
which is filled by the Validator. You might yourself now ask: Where is
the damn glue code? Yeah I know dumb question because I answered it
mostly in the introduction of the post. The interesting thing is that it
isn't a single location. As you will see the responsibilities for
achieving the effect are separated between several components.</p>

<h2>In the next posts we're going to take a look at</h2>

<ul>
<li>how to use the <code>Attached-Behavior-Pattern</code> together with <code>Styles</code> and
<code>resource based inheritance</code> in order to match the Notification (s)
from the <code>ViewModel</code> to the related <code>FrameworkElements</code> in the logical
WPF tree.</li>
<li>how to use a <code>DataTrigger</code> on an <code>Attached Property</code> in order to setup
the Tooltip and showing the red border.</li>
<li>how to bind the Tooltip correctly to the related <code>Notification(s)</code>.</li>
</ul>


<p>I hope I made you at least a bit curious . . .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is actually a composite application?]]></title>
    <link href="http://www.bjoernrochel.de/2009/05/04/what-is-actually-a-composite-application/"/>
    <updated>2009-05-04T23:04:40+02:00</updated>
    <id>http://www.bjoernrochel.de/2009/05/04/what-is-actually-a-composite-application</id>
    <content type="html"><![CDATA[<p>'Composite application' is one of those terms you talk endlessly with other developers about, only to find out that each of them has a totally
different understanding of what the term actually means. If you try to google it you'll find several definitions ranging from 'a solution
stitched composed of loosely coupled semi-independent components' over 'application built by combining multiple existing functions into a new
application' over 'business mashups' to 'frontends to a Service Oriented Architecture'. Just to be clear, I like none of those definitions and I
won't give you a formal definition either. Instead I would like to take quick look at the key differences (as I see them) between composite
applications and conventional architectures. If take a look at how software developers &amp; architects deal with complexity IMHO it mostly
boils down to two things: 1. Decomposition and 2. Integration. Complex problems get broken down into handier pieces which can be solved more
easily. We apply this divide-and-conquer-strategy at multiple levels (classes, algorithms, components, layers, tiers, just to name a few). We
do this to achieve all sort of things like maintainability, reversibility, testability, etc. However, in order to have a working
solution you need to reintegrate all those parts and that integration aspect for me personally is one of the main differences between
conventional and composite architectures:</p>

<ul>
<li>Integration in conventional architectures is performed in a static way, mainly by the compiler but also by deployment tools (f.e.
ILMerge).</li>
<li>Compared to that, integration in composite architectures is more or less dynamic. It's performed at runtime by some kind of integration
architecture with a kernel built around the concept of dependency inversion. When inspecting composite applications you'll very often
find a host-process which dynamically loads modules and a container based infrastructure which does the actual low level composition.
This container can be an actual Inversion-of-Control-container, but this isn't a must. The Managed Extensibility Framework for instance
is able to achieve similar things.</li>
</ul>


<p>Besides that, another aspect really important to composite architecture is the <strong>Open-Closed-Principle applied to architecture</strong>.</p>

<p>OCP was originally formulated by Uncle Bob Martin as</p>

<blockquote><p>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.</p></blockquote>

<p>What does this mean to architecture? It basically means that you're able extend your host environment without
having the need to recompile it. This can range from adding a new module to the system, over registering new business capabilities to extending
the UI of host environment (which is called the shell). So far I've talked a bit about the IMHO typical aspects of composite applications,
but not why you might want to use such an architecture and what possible benefits of such an architecture might be. I guess this is worth an own
post, so I'll spare that for now . . . .</p>
]]></content>
  </entry>
  
</feed>
