<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Conferences | Dude, where's my Kaizen?]]></title>
  <link href="http://www.bjoernrochel.de/blog/categories/conferences/atom.xml" rel="self"/>
  <link href="http://www.bjoernrochel.de/"/>
  <updated>2011-11-15T15:56:30+01:00</updated>
  <id>http://www.bjoernrochel.de/</id>
  <author>
    <name><![CDATA[Björn Rochel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[prio conference 2010]]></title>
    <link href="http://www.bjoernrochel.de/2010/06/21/prio-conference-2010/"/>
    <updated>2010-06-21T08:26:00+02:00</updated>
    <id>http://www.bjoernrochel.de/2010/06/21/prio-conference-2010</id>
    <content type="html"><![CDATA[<p>In case you haven’t heard it yet, I’m going to give 2 talks at this years <a href="http://www.prioconference.de/" title="prio. conference">prio conference</a>.</p>

<p><img src="/images/posts/prioSpreaker-Banner.gif" title="Prio conference 2010" alt="prio conference logo" /></p>

<p>I’m very exited to be part of <a href="http://www.prioconference.de/Speaker/Speaker-prio.conference-2010" title="prio 2010 speakers">this years speaker line up</a> (though the quality of the line up is a bit intimidating ;-)).
Both talks will be on the <a href="http://www.prioconference.de/Programm/Programm-prio.conference-20.-Oktober-2010/prio.conference-Track-32">20th of October in Track 4</a></p>

<ul>
<li>10.05 – 11.05h, Introduction to Rhino.ServiceBus</li>
<li>15.20h – 16.20h, (ServiceBus) Patters for always responsive clients</li>
</ul>


<p>Looking forward to see you there . . .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Open Space Süd Retrospective]]></title>
    <link href="http://www.bjoernrochel.de/2010/06/21/net-open-space-sd-retrospective/"/>
    <updated>2010-06-21T07:46:59+02:00</updated>
    <id>http://www.bjoernrochel.de/2010/06/21/net-open-space-sd-retrospective</id>
    <content type="html"><![CDATA[<p>I haven't blogged in a while, mostly because time has become such a limited resource in the last weeks or to be honest actually months.
Blogging, my current project, workshops, the F# Bookclub, preparation of the next conference appearances and of course xUnit.BDDExtensions all want a piece of that cake.
Finding the right balance between those tasks is often not as easy as I would like it to be.
More often as I like skipping blogging seems to be the easiest way to regain some time.
I’m really sorry for that, but you know I try to do my best.
On the other hand this is a new blog post, so things can’t be that bad, can’t they?
Although I haven’t slept much the last 3 days, something inside me urges to write this post.</p>

<!--more-->


<p>Most of the time of the past weekend I spend in Karlsruhe at the .NET Open Space Süd. To sum it up in 5 words: <strong>The event was a blast</strong>.
I had an unbelievable amount of fun coding, chatting, learning with some of smartest people in the German .NET Community.</p>

<p>This was the 4th Open Space event I attended during the last 2 years and I think this one was the best so far. Why?</p>

<ol>
<li>The content of the sessions I attended / participated in was really high quality. I learned something new in every fracking session. Every session was dense,
focused and we had at least one participant who actually had extensive field experience in the related topic area. No CQRS session disaster this time ;-)</li>
<li>Overly generic topics ala “I want to talk about TDD” or “Let’s talk about (D)DDD” were the minority.</li>
</ol>


<p>Besides that, one personal note: It was a blast to meet some of the guys I got to know throughout the last 2 years again and see the personal progression each of them has made.
Guys, your awesome. Keep up your pace!</p>

<p>So, just to give you an idea about the sessions I attended here’s a quick sum-up of my weekend @NOS_SUED.</p>

<h2>WTF is a Monad? (C# Edition)</h2>

<p>The first day started with one of the hardest topics you might imagine, Monads.
@sforkmann did a great job explaining the various basic monadic types and their implementation in C#.
Helped me a lot to form a better picture of this abstract concept in my mind. Was nice to see the Maybe Monad implemented using query comprehension syntax
(though we found out that the related msdn sample doesn’t compile aka sucks). Sadly we didn’t have time enough to take a look at Monads in F#. Homework, I guess.</p>

<p>Funny side note: The word “Monad” was present throughout the complete weekend.
I guess the revelation that most of us have been using a Monad for quite a while now (in LINQ), though not knowing it, shocked quite a bunch of participants.</p>

<h2>Git tips &amp; tricks </h2>

<p>Next up was @agross with Git. I never forgot that Alex was the person that told me about this “Git thing” two years ago, long before the topic suddenly
started to get the attentions of the .NET OS community. Main focus of this session was the various approaches around conflict resolution and a detailed
look at the difference between merging and rebasing.</p>

<p>Especially interesting was to hear a bit more about this experience with Git in the context of a popular .NET OS project (Alex is one of the core maintainers of MSpec).</p>

<h2>Convention over Configuration</h2>

<p>Halfway through Saturday I talked a bit about my experience with “Convention over Configuration”.
My current project uses conventions a lot (but only for binding, thx @ilkerde for the clarification) and I’m really happy with the outcome so far.
On retrospective I think @ilkerde, @agross and myself did a really good job in categorizing the various ways CoC can be applied from sourcecode,
to builds to deployment.</p>

<h2>BDD vs. ATDD</h2>

<p>The biggest session I participated in was the (dunno what was the exact name of the session)
“Behavior Driven Development vs. classic Acceptance Test Driven Development” session. Was cool to have @agross (MSpec maintainer),
@ssishkin ( my personal Fitnesse guru), @sforkmann (creator of NaturalSpec), @DerAlbert and several others who’ve been doing BDD,
something BDD-like or ATTD in a room and hearing their various war stories and views on the topic.</p>

<h2>Introduction to Reactive Extensions</h2>

<p>If you start a day with Monads to be consequent you need to end it with Monads, too. @sshishkin and @sforkmann gave an interesting talk about the ideas behind IObserver,
IObservable and IQbservable. BTW, how cool is this IQbservable idea?</p>

<h2>Specification By Example Do’s &amp; Dont’ s</h2>

<p>In this session we took a look at the various proven practices in BDD specification design and the other side of the coin,
the different flavors of specification smells. We discussed the ObjectMother pattern, TestData Builder Pattern,
modularization strategies for specs and especially the idea of having the specifications side-by-side with the actual production
code in a single assembly. Very good to see other proponents of this idea.</p>

<p>I was literally blown away by finally seeing the grouping functionality for Visual Studio,
I always wanted to have, <a href="http://mokosh.co.uk/wp-content/uploads/2010/04/image23.png">alive</a>. <a href="http://mokosh.co.uk/vscommands/">VsCommands</a>, I’m going to install you today!</p>

<h2>Behavior Driven Development BDD Framework - Shootout (MSpec vs. NaturalSpec vs. xUnit.BDDExtensions)</h2>

<p>The (un)conference ended for me with a side-by-side comparison of different BDD frameworks.
Several guys asked for this. I guess it makes sense when you’ve got the authors of 3 different frameworks for a particular topic together.
Although I didn’t like the idea at first sight (I don’t like framework wars that much, besides in the end the idea of BDD matters, and not the tools) the session turned
out to be a win for all of us. We demo-ed the typical bank transfer sample in each of the frameworks (MSpec, xUnit.BDDExtensions, NaturalSpec).
Afterwards every framework owner demo-ed additional features more or less unique to the particular framework. I guess, each of us got ideas for “new” features ;-)</p>

<h2>Closing thoughts</h2>

<p>I really enjoyed being in Karsruhe. Big thx to the organization team for making this event possible. I hope to see some of you again at the Open Space in Leipzig later this year or same place next year.</p>

<p>Special thx to @agross, @sforkmann, @ilkerde, @roeb and @sshiskin for the intense and inside-full discussions. You rock guys!!!</p>

<p>One last advice: Don’t forget <strong>Jean Clojure’s basal monad</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Query Separation]]></title>
    <link href="http://www.bjoernrochel.de/2008/11/20/command-query-separation/"/>
    <updated>2008-11-20T03:08:16+01:00</updated>
    <id>http://www.bjoernrochel.de/2008/11/20/command-query-separation</id>
    <content type="html"><![CDATA[<p>Does this sound familiar to you? From time to time someone delivers you answers to questions that have been on your mind for quite a while. You
didn't find an answer on your own and most of the people you talked with either didn't care or hadn't satisfying answers for you. When you
finally hear the answers you were searching for, you're . . .</p>

<ol>
<li>stunned how simple the actual solution is,</li>
<li>wondering why you weren't able to solve that on your own,</li>
<li>nevertheless happy and thankful to finally see the missing piece in
your puzzle.</li>
</ol>


<p>Today I had the luck to be able to talk with Gregory Young about (Distributed) Domain Driven Design in general and in particular some
about questions regarding bidirectional mapping from domain object to DataTransferObject, and how messaging or eventing integrates with DDD.
This is what I took from that discussion . . .</p>

<p><strong>At first there was the problem . . .</strong></p>

<p>It's widely accepted and adopted that domain objects should not be used for displaying data in the UI. The UI should not
dictate the shape of your domain object, nor should it require the domain class to implement stuff (for instance <code>INotifiyPropertyChanged</code>).
Because of that, you introduce DataTransferObjects for displaying data in the UI. This is beneficial because all of a sudden you're able to
have different views on the same domain object. Nearly the same applies for distributed scenarios. Tech-specific stuff like attributes for
serialization or the need for public getters and setters should not dictate the shape of your domain object. Again the answer is
DataTransferObject, because they protect the domain objects from infrastructure related needs. The situation becomes even more
interesting, when you want your domain model to have a more behavior oriented design, where behavior is best expressed through methods and
with less properties. Why should you do this? First you can protect the validity of your domain object far better with bundling changes that you
can make on it, in methods. With that you get rid of temporary invalid state in which all of the properties are set to correct values and live
in your domain model becomes easier in a lot of places (because you don't have to check for validity everywhere). Second why should the data
be exposed anyway, if not for display or persistence? What about Data-encapsulation, anyone? So if you remove all the getter setter stuff
from domain objects, how do you do the mapping to a DTO without imposing some shape constraints on the domain object. ? And how do you do that
mapping without inventing the next hot reflection &amp; attribute based thing of the day? I know a lot of applications in which domain objects
and DTOs look exactly the same (with the only subtle difference that the domain object lacks some of the attributes or implemented interfaces of
the DTO) because of that problem. What is the benefit of this? For some systems with public APIs consumed by a third party this might make
sense, because it delivers the ability to develop the internal API separated from the public one. For the rest of all applications out
there it introduces reversibility and flexibility at the cost of the overhead for DTOs. This is very often hard to communicate, because the
benefit is not so obvious.</p>

<h2>. . . and then came the solution:</h2>

<p>You'll have to separate write access to your domain from the read access which is exactly known as the Command Query Separation. I made
some sketches while listening to Greg talk, because I had to visualize this for myself. (They look awful, I know but having a picture to
describe something is better compared to having none . . ) Look at the following sketch. It tries to show the data flow trough an application
for a simple read-update-scenario.</p>

<p><a href="/images/posts/img-1750.jpg"><img src="/images/posts/img-1750-thumb.jpg" alt="IMG_1750" /></a></p>

<p>The interesting part is that the mapping from domain object to DTO is missing. The query side is fully based on DTOs. When the something is
changed a command is executed which performs the action on the domain model and persists the changes via the repositories. Looks like a
circle, doesn't it? How is the situation when we have a read-update scenario a multi proc application, for instance classic client / server?
I tried to capture that too. Using the separation it doesn't seem too hard to integrate.</p>

<p><a href="/images/posts/img-1754.jpg"><img src="/images/posts/img-1754-thumb.jpg" alt="IMG_1754" /></a></p>

<p>What's new in the picture? MessageHandlers ! They can receive and send messages and serve as communication endpoints. Besides that the
presentation stays pretty much the same.</p>

<h2>Integrating change notifications to the model </h2>

<p>What is also very easy to integrate into this architecture are change notifications. The following sketch shows
only the command portion of the sketches above. The only thing we need
to do in order to do change notifications is to publish messages /
events into a message bus / event bus when we've changed something on
our domain objects.</p>

<p><a href="/images/posts/img-1754.jpg"><img src="/images/posts/img-1751.jpg" alt="IMG_1751" /></a></p>

<p>With that we can add change logging, tracking, monitoring in a very loosely coupled way (and that are only a few possibilities).</p>

<h2>Final thoughts</h2>

<p>Isn't there a chapter in Eric Evans book called "Refactoring to deeper insight" ? That somehow describes how I currently feel. The
proposed solution is very flexible, supports poco domains which focus on behavior and protects that domain from infrastructure related stuff. I
do not claim it to be the solution, but it certainly is a valid solution to the problem. What I like about it in particular is how nicely it
integrates with my <a href="/2008/11/08/some-thoughts-about-validation-logic/">thoughts about validation logic</a> (domain validation is always in valid state, validation is done at the
domain edge).</p>

<p>Greg, if you're reading this, thanks a lot for answering my questions that detailed (and excuse my wacky English skills :-)).
Meeting people like you justifies the whole traveling to San Francisco alone . . .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quote of the day]]></title>
    <link href="http://www.bjoernrochel.de/2008/11/19/quote-of-the-day/"/>
    <updated>2008-11-19T06:57:46+01:00</updated>
    <id>http://www.bjoernrochel.de/2008/11/19/quote-of-the-day</id>
    <content type="html"><![CDATA[<p>Enjoy the following comment I've heard today in the Domain Specific Languages track:</p>

<blockquote><p><strong>. . . XML is data dressed up as a hooker . . .</strong></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on (J / Iron)Ruby]]></title>
    <link href="http://www.bjoernrochel.de/2008/11/18/thoughts-on-j-ironruby/"/>
    <updated>2008-11-18T06:36:27+01:00</updated>
    <id>http://www.bjoernrochel.de/2008/11/18/thoughts-on-j-ironruby</id>
    <content type="html"><![CDATA[<p>Today I attended a tutorial about JRuby and JRuby on Rails. It was presented by Ola Bini from Thoughtworks, who did the more general part
on (J)Ruby and Nick Sieger from Sun, who did the Rails stuff. What can I say, it was really cool.</p>

<p>I've been curious about Ruby for quite a while now, mostly because of its influence on the .NET open source community (MSpec, MonoRail,
Asp.net MCV, etc.) , but also because my personal interest in internal domain specific languages. It's a lot easier to build internal domain
specific languages with Ruby than it's with a statically typed languages like C# or Java. Compare RSpec for instance with its C# counterpart
MSpec and you instantly realize the difference when it comes to terms of readability and less code to write in order to get things done.</p>

<p>What was interesting in this talk in particular is the fact that most of the things that apply to JRuby and Java also apply (or will apply) to
IronRuby and .NET:</p>

<ul>
<li><strong>The reuse of existing IT infrastructure</strong>. In the not so far future Rails will be able to be run on top of .NET and IIS. No
existing Ruby infrastructure will be needed in order to get it running. No new server / infrastructure know how will be needed for
running Rails in a .NET environment.</li>
<li><strong>The integration between a statically typed platform and Ruby in both directions</strong>. C# will be able to integrate dynamically typed
code (C# keyword dynamic) and pure Ruby applications can be run on top of .NET. Besides that IronRuby will also have a fantastic
integration of the .NET framework libraries and will be able to extend its view of the .NET world with Ruby concepts (I think it's
called monkey patching). Opening up and extending .NET types from IronRuby and support for snake casing for members on .NET Framework
built-in types are some of the nice features.</li>
</ul>


<p>It'll be interesting to see the impact of IronRuby on the .NET OS community. My guess is that the overall adoption rate of IronRuby in
that circle will be pretty high (assuming that Microsoft succeeds in delivering a first class implementation of Ruby). Ruby has the potential
to enable a more language oriented style of programming on the platform, which is exactly what a lot of .NET OS key players are striving for.</p>

<p>Writing more expressive, readable and maintainable code has always been important for me too and one of the consequences of today is that I'll
definitely will invest more time into Ruby and IronRuby in the near future. I'm curious to hear opinions about IronRuby and its impact on
the .NET community . . .</p>

<p>Bye the way: Is Rails a software factory? A lot of the things I saw today reminded me of software factories . . .</p>
]]></content>
  </entry>
  
</feed>
